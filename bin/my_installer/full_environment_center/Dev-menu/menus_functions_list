#!/bin/bash
main_menu(){
	options=("Font-size" "Update" "Install" "Uninstall" "Quit")
	SUB=$(printf '%s\n' "${options[@]}" | shellect "choices:" | tr '[:upper:]' '[:lower:]' | sed 's/-/_/g')
	[ -n "$SUB" ] && [ "$SUB" != "quit" ] && ${SUB}_menu
}

run_confirmtion(){
	message="${1:-}"
	choice=(yes no)
	choice=$(printf '%s\n' "${choice[@]}" | shellect "$message")
	if [ "$choice" = "no" ];then
		return 1
	fi
}

font_size_menu(){
	choice=(7 8 9 10 11 12 13 14 "<< Back")
	choice=$(printf '%s\n' "${choice[@]}" | shellect "Choose your terminal font size" | tr '[:upper:]' '[:lower:]')
	if [[ $choice =~ ^[0-9]+$ ]];then
		sed -i "s/^size = .*$/size = $choice/g" ~/.config/alacritty/font-size.toml || :
		Font_size_menu
	else
		main_menu
	fi
}

update_menu(){
	CHOICES=(
		"Ollama        Run LLMs, like Meta's Llama3, locally"
		"LazyGit       TUI for Git"
		"LazyDocker    TUI for Docker"
		"Neovim        Text editor that runs in the terminal"
		"Zellij        Adds panes, tabs, and sessions to the terminal"
		"<< Back       "
	)
	CHOICE=$(printf '%s\n' "${CHOICES[@]}" | shellect  "Update manually-managed applications" | tr '[:upper:]' '[:lower:]')
	if [[ "$CHOICE" == "<< Back"* ]] || [[ -z "$CHOICE" ]];then
		# Don't update anything
		echo ""
	else
		INSTALLER=$(echo "$CHOICE" | awk -F '   ' '{print $1}' | tr '[:upper:]' '[:lower:]')
		. "$DEV_PATH/install/app-$INSTALLER.sh" && echo "Update completed!" && sleep 3
	fi
	
	clear
	main_menu
}

install_menu(){
	packages=(
		"1password     Manage your passwords securely across devices"
		"Alacritty     GPU-accelerated terminal emulator focused on performance and simplicity. "
		"Audacity      Record and edit audio"
		"Brave         Chrome-based browser with built-in ad blocking"
		"Doom Emacs    Emacs framework with curated list of packages"
		"Dropbox       Sync files across computers with ease"
		"Flameshot     Take screenshots with many built-in features to save you time."
		"Localsend     File sharing tool that allows you to share files to nearby devices."
		"Neovim        a Vim-based text editor engineered for extensibility and usability,"
		"Obsidian      Personal knowledge base and note-taking software application that operates on Markdown files. "
		"OBS Studio    Record screencasts with inputs from both display + webcam"
		"Ollama        Run LLMs, like Meta's Llama3, locally"
		"Pinta         Bitmap image drawing and editing program inspired by Paint.NET"
		"RubyMine      IntelliJ's commercial Ruby editor"
		"Signal        encrypted messaging service for instant messaging, voice calls, and video calls."
		"Typora        Simple and configurable document editor that provides excellent Markdown support."
		"VirtualBox    Virtual machines to run Windows/Linux"
		"VLC           Multimedia player and framework that plays most multimedia files, and various streaming protocols."
		"VScode        Source-code editor developed by Microsoft for Windows, Linux, macOS and web browsers. "
		"Xournalpp     Note-taking software that is fast, flexible, and functional."
		"Zed           Fast all-purpose editor"
		"Zoom          Attend and host video chat meetings"
	)
	CHOICES=(
		"Dev Language  Install programming language environment"
		"Dev Database  Install development database in Docker"
	)
	
	for package in ${!packages[*]};do
		CHOICES+=("${packages[${package}]}")
	done
	
	CHOICES+=(
		"> All         Re-run any of the default installers"
		"<< Back       "
	)
	
	CHOICE=$(printf '%s\n' "${CHOICES[@]}" | shellect "Install application" | tr '[:upper:]' '[:lower:]')
	
	if [[ "$CHOICE" == "<< back"* ]] || [[ -z "$CHOICE" ]];then
		# Don't install anything
		echo ""
	elif [[ "$CHOICE" == "dev database"* ]];then
		select_dev_storage_menu && echo "Install completed!" && sleep 3
	elif [[ "$CHOICE" == "dev language"* ]];then
		select_dev_language_menu && echo "Install completed!" && sleep 3
	elif [[ "$CHOICE" == "> all"* ]];then
		for package in ${!packages[*]};do
			package="${packages[${package}]}"
			INSTALLER=$(echo "$packages" | awk -F '   ' '{print $1}' | tr '[:upper:]' '[:lower:]')
			run_confirmtion "Do you want to install ${INSTALLER}?" && . "$DEV_PATH/install/app-$INSTALLER.sh" && echo "Install completed!" && sleep 3
		done
	else
		INSTALLER=$(echo "$CHOICE" | awk -F '   ' '{print $1}' | tr '[:upper:]' '[:lower:]')
		. "$DEV_PATH/install/app-$INSTALLER.sh" && echo "Install completed!" && sleep 3
	fi
	
	clear
	main_menu
}

select_dev_storage_menu(){
	AVAILABLE_DBS=("MySQL" "Redis" "PostgreSQL")
	AVAILABLE_DBS+=("<< Back")
	dbs=$(printf '%s\n' "${AVAILABLE_DBS[@]}" | shellect "Select databases (runs in Docker)")
	if [[ "$dbs" == "<< Back"* ]] || [[ -z "$dbs" ]];then
		echo ""
	elif [[ -n "$dbs" ]];then
		for db in $dbs; do
			case $db in
			MySQL)
				my-installer --container mysql
				;;
			Redis)
				my-installer --container redis
				;;
			PostgreSQL)
				my-installer --container postgres
				;;
			esac
		done
	fi
	install_menu
}

select_dev_language_menu(){
	AVAILABLE_LANGUAGES=("Ruby on Rails" "Node.js" "Go" "PHP" "Python" "Elixir" "Rust" "Java")
	AVAILABLE_LANGUAGES+=("<< Back")
	languages=$(printf '%s\n' "${AVAILABLE_LANGUAGES[@]}" | shellect "Select programming languages")

	if [[ "$languages" == "<< Back"* ]] || [[ -z "$languages" ]];then
		echo ""
	elif [[ -n "$languages" ]];then
		for language in $languages; do
			case $language in
			Ruby)
				my-installer --install-needed ruby
				;;
			Node.js)
				my-installer --install-needed node
				;;
			Go)
				my-installer --install-needed go
				;;
			PHP)
				my-installer --install-needed php
				;;
			Python)
				my-installer --install-needed python
				;;
			Elixir)
				my-installer --install-needed elixir
				;;
			Rust)
				my-installer --install-needed rust
				;;
			Java)
				my-installer --install-needed java
				;;
			esac
		done
	fi
	install_menu
}

uninstall_menu(){
	UNINSTALLERS=()
	
	for package in $(ls $DEV_PATH/uninstall);do
		package=$(echo "$package" | sed 's/app-//' | sed 's/.sh//' | sed 's/.*/\u&/' )
		UNINSTALLERS+=("$package")
	done
	
	UNINSTALLERS+=("<< Back")
	UNINSTALLER=$(printf '%s\n' "${UNINSTALLERS[@]}" | shellect "Choose package to uninstall:" | tr '[:upper:]' '[:lower:]')
	
	[ "$UNINSTALLER" = "<< Back"* ] && [ -n "$UNINSTALLER" ] && run_confirmtion "Run uninstaller?" && . $UNINSTALLER && echo "Uninstall completed!" && sleep 3
	clear
	main_menu
}

##############################
#;#############################
#; kitty
#;#############################
##############################
#: Keyboard shortcuts {{{

#: For a list of key names, see: the GLFW key macros
#: <https://github.com/kovidgoyal/kitty/blob/master/glfw/glfw3.h#L349>.
#: The name to use is the part after the GLFW_KEY_ prefix. For a list
#: of modifier names, see: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you can only use an XKB key
#: name for keys that are not known as GLFW keys.

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-keyboard option.
#: Then kitty will output some debug text for every key event. In that
#: text look for ``native_code`` the value of that becomes the key
#: name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20
kitty_mod=ctrl + Shift
#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
copy_to_clipboard=kitty_mod + c
#: modifiers for all the default shortcuts.
#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise. Similarly, copy_and_clear_or_interrupt
#: will copy and clear the selection or send an interrupt if there is
#: no selection.
paste_from_clipboard=kitty_mod + v  
paste_from_selection (1)=kitty_mod + s  
paste_from_selection (2)=Shift + insert 
pass_selection_to_program=kitty_mod + o  
#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, the selection
#: will be passed as a command line argument to the program, for
#: example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

scroll line up (1)=kitty_mod + up        
scroll line up (2)=kitty_mod + k         
scroll_line_down (1)=kitty_mod + down      
scroll_line_down (2)=kitty_mod + j         
scroll_page_up=kitty_mod + page_up   
scroll_page_down=kitty_mod + page_down 
scroll_home=kitty_mod + home      
scroll_end=kitty_mod + end       
show_scrollback=kitty_mod + h  
#: You can pipe the contents of the current screen + history buffer as
#: STDIN to an arbitrary program using the ``launch`` function. For
#: example, the following opens the scrollback buffer in less in an
#: overlay window::

#:     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#: For more details on piping screen and buffer contents to external
#: programs, see launch.       
new_window=kitty_mod + enter
#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      launch mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    launch --cwd=current

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter launch --allow-remote-control some_program

#: You can open a new window next to the currently active window or as
#: the first window, with::

#:     map ctrl+n launch --location=neighbor some_program
#:     map ctrl+f launch --location=first some_program
new_os_window=kitty_mod + n
#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.
close_window=kitty_mod + w
next_window=kitty_mod + ]
previous_window=kitty_mod + [
move_window_forward=kitty_mod + f
move_window_backward=kitty_mod + b
move_window_to_top=kitty_mod + `
start_resizing_window=kitty_mod + r
first_window=kitty_mod + 1
second_window=kitty_mod + 2
third_window=kitty_mod + 3
fourth_window=kitty_mod + 4
fifth_window=kitty_mod + 5
sixth_window=kitty_mod + 6
seventh_window=kitty_mod + 7
eighth_window=kitty_mod + 8
ninth_window=kitty_mod + 9
tenth_window=kitty_mod + 0
next_tab=kitty_mod + right
previous_tab=kitty_mod + left
new_tab=kitty_mod + t
close_tab=kitty_mod + q
move_tab_forward=kitty_mod + .
move_tab_backward=kitty_mod + ,
set_tab_title=kitty_mod + alt + t
#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
next_layout=kitty_mod + l
#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
change_font_size+2.0=kitty_mod + equal
change_font_size-2.0=kitty_mod + minus
change_font_size all  0=kitty_mod + backspace
#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.
kitten_clipboard=kitty_mod + e
open_url_with=kitty_mod + p > f
insert_path=kitty_mod + p > Shift + f
open_path_with=kitty_mod + p > l
insert_words=kitty_mod + p > w
insert_hash=kitty_mod + p > h
select_line=kitty_mod + p > n
select_filename=kitty_mod + p > y
toggle_fullscreen=kitty_mod + f11    
toggle_maximized=kitty_mod + f10    
unicode_input=kitty_mod + u
edit_config_file=kitty_mod + f2     
kitty_shell window=kitty_mod + escape 
set_background_opacity  + 0.1=kitty_mod + a > m    
set_background_opacity -0.1=kitty_mod + a > l    
set_background_opacity 1=kitty_mod + a > 1    
set_background_opacity default=kitty_mod + a > d    
clear_terminal reset active=kitty_mod + delete 
#;

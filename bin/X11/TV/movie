#!/usr/bin/env sh

LOBSTER_VERSION="4.3.7"

### General Variables ###
config_dir="$HOME/.config/lobster"
data_dir="$HOME/.local/share/lobster"
tmp_dir="${TMPDIR:-/tmp}/lobster"
lobster_socket="${TMPDIR:-/tmp}/lobster.sock" # Used by mpv (check the play_video function)
lobster_logfile="${TMPDIR:-/tmp}/lobster.log"
applications="$HOME/.local/share/applications/lobster" # Used for external menus (for now just rofi)
images_cache_dir="$tmp_dir/lobster-images"             # Used for storing downloaded images of movie covers

### user conf ###
. "/usr/share/my_stuff/lib/common/WM"
. "${script_config_path}/My_TV/movie.conf"

histfile="$data_dir/lobster_history.txt"
ueberzug_max_width=$(($(tput lines) / 2))
ueberzug_max_height=$(($(tput lines) / 2))
watchlater_dir="$tmp_dir/watchlater"

### OS Specific Variables ###
separator=':'             # default value
path_thing="\\"           # default value
ueberzugpp_tmp_dir="/tmp" # for some reason ueberzugpp only uses $TMPDIR on Darwin

### HTML Decoding ###
command -v "hxunent" >/dev/null 2>&1 && hxunent="hxunent" || hxunent="tee /dev/null" # use hxunent if installed, else do nothing

### Notifications ###
command -v notify-send >/dev/null 2>&1 && notify="true" || notify="false" # check if notify-send is installed

### must create dir ###
mkdir -p "$tmp_dir"
mkdir -p "$config_dir"
mkdir -p "$data_dir"
mkdir -p "$(dirname "$histfile")"
mkdir -p "$watchlater_dir"

# send_notification [message] [timeout] [icon] [title]
send_notification() {
    [ "$json_output" = "true" ] && return
    if [ "$use_external_menu" = "false" ] || [ -z "$use_external_menu" ]; then
        [ -z "$4" ] && printf "\33[2K\r\033[1;34m%s\n\033[0m" "$1" && return
        [ -n "$4" ] && printf "\33[2K\r\033[1;34m%s - %s\n\033[0m" "$1" "$4" && return
    fi
    [ -z "$2" ] && timeout=3000 || timeout="$2" # default timeout is 3 seconds
    if [ "$notify" = "true" ]; then
        [ -z "$3" ] && notify-send "$1" "$4" -t "$timeout" -h string:x-dunst-stack-tag:vol # the -h string:x-dunst-stack-tag:vol is used for overriding previous notifications
        [ -n "$3" ] && notify-send "$1" "$4" -t "$timeout" -i "$3" -h string:x-dunst-stack-tag:vol
    fi
}

### Cleanup Functions ###
cleanup() {
    rm -rf "$tmp_dir"
    [ "$remove_tmp_lobster" = "true" ] && rm -rf "$tmp_dir"

    if [ "$image_preview" = "true" ] && [ "$use_external_menu" = "false" ] && [ "$use_ueberzugpp" = "true" ]; then
        killall ueberzugpp 2>/dev/null
        rm -f "$ueberzugpp_tmp_dir"/ueberzugpp-*
    fi
    set +x && exec 2>&-
}
trap cleanup EXIT INT TERM

### Dependencies Check ###
dep_ch() {
    for dep; do
        if ! command -v "$dep" >/dev/null; then
            send_notification "Program \"$dep\" not found. Please install it."
            exit 1
        fi
    done
}

# The reason I use additional file descriptors is because of the use of tee
# which when piped into would hijack the terminal, which was unwanted behavior
# since there are SSH use cases for mpv and since I wanted to have a logging mechanism
exec 3>&1 4>&2 1>"$lobster_logfile" 2>&1
{
    # check that the necessary programs are installed
    check_dep="grep sed curl"
    if [ "$use_external_menu" = "true" ]; then
        check_dep="$check_dep rofi"
    else
    	 check_dep="$check_dep fzf"
    fi
    if [ "$player" = "mpv" ]; then
        check_dep="$check_dep awk nc mpv"
    fi
	
	dep_ch $check_dep || true
	
    ### Launchers stuff (rofi, fzf, etc.) ###
    generate_desktop() {
        cat <<EOF
[Desktop Entry]
Name=$1
Exec=echo %k %c
Icon=$2
Type=Application
Categories=lobster;
EOF
    }
    # A launcher is a utility used to select an option from a list (fzf, rofi)
    # launcher [prompt] [columns-to-display]
    case "$use_external_menu" in
       "true")
			launcher() {
            	[ -z "$2" ] && rofi -sort -dmenu -i -width 1500 -p "" -mesg "$1"
            	[ -n "$2" ] && rofi -sort -dmenu -i -width 1500 -p "" -mesg "$1" -display-columns "$2"
            }
            ;;
       *)
       		launcher() {
           		[ -z "$2" ] && fzf --reverse --prompt "$1"
           		[ -n "$2" ] && fzf --reverse --prompt "$1" --with-nth "$2" -d "\t"
           	}
           ;;
    esac
    # helper function to be able to display only an "nth" column in fzf/rofi without altering the stdin
    nth() {
        stdin=$(cat -)
        [ -z "$stdin" ] && return 1
        prompt="$1"
        [ $# -ne 1 ] && shift
        line=$(printf "%s" "$stdin" | sed -nE "s@^(.*)\t[0-9:]*\t[0-9]*\t(tv|movie)(.*)@\1 (\2)\t\3@p" | cut -f1-3,6,7 | tr '\t' '|' | launcher "$prompt" | cut -d "|" -f 1)
        [ -n "$line" ] && printf "%s" "$stdin" | sed -nE "s@^$line\t(.*)@\1@p" || exit 1
    }

    ### User Prompts ###
    prompt_to_continue() {
        if [ "$media_type" = "tv" ]; then
            continue_choice=$(printf "Next episode\nReplay episode\nExit\nSearch" | launcher "Select: ")
        else
            continue_choice=$(printf "Exit\nSearch" | launcher "Select: ")
        fi
    }

    ### Searching/Selecting ###
    get_input() {
        if [ "$use_external_menu" = "false" ]; then
            printf "Search Movie/TV Show: " && read -r query
        else
            if [ -n "$rofi_prompt_config" ]; then
                query=$(printf "" | rofi -theme "$rofi_prompt_config" -sort -dmenu -i -width 1500 -p "" -mesg "Search Movie/TV Show")
            else
                query=$(printf "" | launcher "Search Movie/TV Show")
            fi
        fi
        [ -n "$query" ] && query=$(echo "$query" | tr ' ' '-')
        [ -z "$query" ] && send_notification "Error" "1000" "" "No query provided" && exit 1
    }
    search() {
        response=$(curl -s "https://${base}/search/$1" | sed ':a;N;$!ba;s/\n//g;s/class="flw-item"/\n/g' |
            sed -nE "s@.*img data-src=\"([^\"]*)\".*<a href=\".*/(tv|movie)/watch-.*-([0-9]*)\".*title=\"([^\"]*)\".*class=\"fdi-item\">([^<]*)</span>.*@\1\t\3\t\2\t\4 [\5]@p")
        [ -z "$response" ] && send_notification "Error" "1000" "" "No results found" && exit 1
    }
    choose_episode() {
        if [ -z "$season_id" ]; then
            tmp_season_id=$(curl -s "https://${base}/ajax/v2/tv/seasons/${media_id}" | sed -nE "s@.*href=\".*-([0-9]*)\">(.*)</a>@\2\t\1@p" | launcher "Select a season: " "1")
            [ -z "$tmp_season_id" ] && exit 1
            season_title=$(printf "%s" "$tmp_season_id" | cut -f1)
            season_id=$(printf "%s" "$tmp_season_id" | cut -f2)
            tmp_ep_id=$(curl -s "https://${base}/ajax/v2/season/episodes/${season_id}" | sed ':a;N;$!ba;s/\n//g;s/class="nav-item"/\n/g' |
                sed -nE "s@.*data-id=\"([0-9]*)\".*title=\"([^\"]*)\">.*@\2\t\1@p" | $hxunent | launcher "Select an episode: " "1")
            [ -z "$tmp_ep_id" ] && exit 1
        fi
        [ -z "$episode_title" ] && episode_title=$(printf "%s" "$tmp_ep_id" | cut -f1)
        [ -z "$data_id" ] && data_id=$(printf "%s" "$tmp_ep_id" | cut -f2)
        episode_id=$(curl -s "https://${base}/ajax/v2/episode/servers/${data_id}" | sed ':a;N;$!ba;s/\n//g;s/class="nav-item"/\n/g' |
            sed -nE "s@.*data-id=\"([0-9]*)\".*title=\"([^\"]*)\".*@\1\t\2@p" | grep "$provider" | cut -f1)
    }
    next_episode_exists() {
        episodes_list=$(curl -s "https://${base}/ajax/v2/season/episodes/${season_id}" | sed ':a;N;$!ba;s/\n//g;s/class="nav-item"/\n/g' |
            sed -nE "s@.*data-id=\"([0-9]*)\".*title=\"([^\"]*)\">.*@\2\t\1@p" | $hxunent)
        next_episode=$(printf "%s" "$episodes_list" | sed -n "/$data_id/{n;p;}")
        [ -n "$next_episode" ] && return
        tmp_season_id=$(curl -s "https://${base}/ajax/v2/tv/seasons/${media_id}" | sed -n "/href=\".*-$season_id/{n;n;n;n;p;}" | sed -nE "s@.*href=\".*-([0-9]*)\">(.*)</a>@\2\t\1@p")
        [ -z "$tmp_season_id" ] && return
        season_title=$(printf "%s" "$tmp_season_id" | cut -f1)
        season_id=$(printf "%s" "$tmp_season_id" | cut -f2)
        next_episode=$(curl -s "https://${base}/ajax/v2/season/episodes/${season_id}" | sed ':a;N;$!ba;s/\n//g;s/class="nav-item"/\n/g' |
            sed -nE "s@.*data-id=\"([0-9]*)\".*title=\"([^\"]*)\">.*@\2\t\1@p" | $hxunent | head -1)
        [ -n "$next_episode" ] && return
    }

    ### Image Preview ###
    download_thumbnails() {
        printf "%s\n" "$1" | while read -r cover_url id type title; do
            cover_url=$(printf "%s" "$cover_url" | sed -E 's/\/[[:digit:]]+x[[:digit:]]+\//\/1000x1000\//')
            curl -s -o "$images_cache_dir/  $title ($type)  $id.jpg" "$cover_url" &
            if [ "$use_external_menu" = "true" ]; then
                entry="$tmp_dir/applications/$id.desktop"
                # The reason for the spaces is so that only the title can be displayed when using rofi
                # or fzf, while still keeping the id and type in the string after it's selected
                generate_desktop "$title ($type)" "$images_cache_dir/  $title ($type)  $id.jpg" >"$entry" &
            fi
        done
        sleep "$2"
    }
    # defaults to chafa
    image_preview_fzf() {
        if [ "$use_ueberzugpp" = "true" ]; then
            UB_PID_FILE="$tmp_dir.$(uuidgen)"
            if [ -z "$ueberzug_output" ]; then
                ueberzugpp layer --no-stdin --silent --use-escape-codes --pid-file "$UB_PID_FILE"
            else
                ueberzugpp layer -o "$ueberzug_output" --no-stdin --silent --use-escape-codes --pid-file "$UB_PID_FILE"
            fi
            UB_PID="$(cat "$UB_PID_FILE")"
            LOBSTER_UEBERZUG_SOCKET="$ueberzugpp_tmp_dir/ueberzugpp-$UB_PID.socket"
            choice=$(find "$images_cache_dir" -type f -exec basename {} \; | fzf -i -q "$1" --cycle --preview-window="$preview_window_size" --preview="ueberzugpp cmd -s $LOBSTER_UEBERZUG_SOCKET -i fzfpreview -a add -x $ueberzug_x -y $ueberzug_y --max-width $ueberzug_max_width --max-height $ueberzug_max_height -f $images_cache_dir/{}" --reverse --with-nth 2 -d "  ")
            ueberzugpp cmd -s "$LOBSTER_UEBERZUG_SOCKET" -a exit
        else
            dep_ch "chafa" || true
            choice=$(find "$images_cache_dir" -type f -exec basename {} \; | fzf -i -q "$1" --cycle --preview-window="$preview_window_size" --preview="chafa -f sixels -s $chafa_dims $images_cache_dir/{}" --reverse --with-nth 2 -d "  ")
        fi
    }
    select_desktop_entry() {
        if [ "$use_external_menu" = "true" ]; then
            [ -n "$image_config_path" ] && choice=$(rofi -show drun -drun-categories lobster -filter "$1" -show-icons -theme "$image_config_path" | sed -nE "s@.*/([0-9]*)\.desktop@\1@p") 2>/dev/null || choice=$(rofi -show drun -drun-categories lobster -filter "$1" -show-icons | sed -nE "s@.*/([0-9]*)\.desktop@\1@p") 2>/dev/null
            media_id=$(printf "%s" "$choice" | cut -d\  -f1)
            title=$(printf "%s" "$choice" | sed -nE "s@[0-9]* (.*) \((tv|movie)\)@\1@p")
            media_type=$(printf "%s" "$choice" | sed -nE "s@[0-9]* (.*) \((tv|movie)\)@\2@p")
        else
            image_preview_fzf "$1"
            tput reset
            media_id=$(printf "%s" "$choice" | sed -nE "s@.* ([0-9]*)\.jpg@\1@p")
            title=$(printf "%s" "$choice" | sed -nE "s@[[:space:]]* (.*) \[.*\] \((tv|movie)\)  [0-9]*\.jpg@\1@p")
            media_type=$(printf "%s" "$choice" | sed -nE "s@[[:space:]]* (.*) \[.*\] \((tv|movie)\)  [0-9]*\.jpg@\2@p")
        fi
    }

    ### Scraping/Decryption ###
    get_embed() {
        if [ "$media_type" = "movie" ]; then
            # request to get the episode id
            movie_page="https://${base}"$(curl -s "https://${base}/ajax/movie/episodes/${media_id}" |
                sed ':a;N;$!ba;s/\n//g;s/class="nav-item"/\n/g' | sed -nE "s@.*href=\"([^\"]*)\"[[:space:]]*title=\"${provider}\".*@\1@p")
            episode_id=$(printf "%s" "$movie_page" | sed -nE "s_.*-([0-9]*)\.([0-9]*)\$_\2_p")
        fi
        # request to get the embed
        embed_link=$(curl -s "https://${base}/ajax/episode/sources/${episode_id}" | sed -nE "s_.*\"link\":\"([^\"]*)\".*_\1_p")
        if [ -z "$embed_link" ]; then
            send_notification "Error" "Could not get embed link"
            exit 1
        fi
    }
    extract_from_json() {
        video_link=$(printf "%s" "$json_data" | tr '[' '\n' | sed -nE 's@.*\"file\":\"(.*\.m3u8).*@\1@p' | head -1)
        [ -n "$quality" ] && video_link=$(printf "%s" "$video_link" | sed -e "s|/playlist.m3u8|/$quality/index.m3u8|")

        [ "$json_output" = "true" ] && printf "%s\n" "$json_data" && exit 0
        subs_links=$(printf "%s" "$json_data" | tr "{}" "\n" | sed -nE "s@.*\"file\":\"([^\"]*)\",\"label\":\"(.$subs_language)[,\"\ ].*@\1@p")
        subs_arg="--sub-file"
        num_subs=$(printf "%s" "$subs_links" | wc -l)
        if [ "$num_subs" -gt 0 ]; then
            subs_links=$(printf "%s" "$subs_links" | sed -e "s/:/\\$path_thing:/g" -e "H;1h;\$!d;x;y/\n/$separator/" -e "s/$separator\$//")
            subs_arg="--sub-files"
        fi
        [ -z "$subs_links" ] && send_notification "No subtitles found"
    }
    json_from_id() {
        json_data=$(curl -s "https://misc-embed-decrypt.v4sq52.easypanel.host/embed?embed_url=${embed_link}&referrer=https://${base}")
    }
    get_json() {
        json_from_id
        if [ -n "$json_data" ]; then
            extract_from_json
        else
            send_notification "Error" "Could not get json data"
            exit 1
        fi
    }

    ### History ###
    check_history() {
        if [ ! -f "$histfile" ]; then
            [ "$image_preview" = "true" ] && send_notification "Now Playing" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$title"
            [ "$json_output" != "true" ] && send_notification "Now Playing" "5000" "" "$title"
            return
        fi
        case $media_type in
            movie)
                if grep -q "$media_id" "$histfile"; then
                    resume_from=$(grep "$media_id" "$histfile" | cut -f2)
                    send_notification "Resuming from" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$resume_from"
                else
                    send_notification "Now Playing" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$title"
                fi
                ;;
            tv)
                if grep -q "$media_id" "$histfile"; then
                    if grep -q "$episode_id" "$histfile"; then
                        [ -z "$resume_from" ] && resume_from=$(sed -nE "s@.*\t([0-9:]*)\t$media_id\ttv\t$season_id.*@\1@p" "$histfile")
                        send_notification "$season_title" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$episode_title"
                    fi
                else
                    send_notification "$season_title" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$episode_title"
                fi
                ;;
            *) send_notification "This media type is not supported" ;;

        esac
    }
    save_history() {
        case $media_type in
            movie)
                if [ "$progress" -gt "90" ]; then
                    sed -i "/$media_id/d" "$histfile"
                    send_notification "Deleted from history" "5000" "" "$title"
                else
                    if grep -q -- "$media_id" "$histfile" 2>/dev/null; then
                        sed -i "s|\t[0-9:]*\t$media_id|\t$position\t$media_id|1" "$histfile"
                        send_notification "Saved to history" "5000" "" "$title"
                    else
                        printf "%s\t%s\t%s\t%s\t%s\n" "$title" "$position" "$media_id" "$media_type" "$image_link" >>"$histfile"
                        send_notification "Saved to history" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$title"
                    fi
                fi
                ;;
            tv)
                if [ "$progress" -gt "90" ]; then
                    next_episode_exists
                    if [ -n "$next_episode" ]; then
                        episode_title=$(printf "%s" "$next_episode" | cut -f1)
                        data_id=$(printf "%s" "$next_episode" | cut -f2)
                        episode_id=$(curl -s "https://${base}/ajax/v2/episode/servers/${data_id}" | sed ':a;N;$!ba;s/\n//g;s/class="nav-item"/\n/g' |
                            sed -nE "s@.*data-id=\"([0-9]*)\".*title=\"([^\"]*)\".*@\1\t\2@p" | grep "$provider" | cut -f1)
                        sed -i "s|\t[0-9:]*\t[0-9]*\ttv\t[0-9]*\t[0-9]*.*\t.*\t[0-9]*|\t00:00:00\t$media_id\ttv\t$season_id\t$episode_id\t$season_title\t$episode_title\t$data_id|1" "$histfile"
                        send_notification "Updated to next episode" "5000" "" "$episode_title"
                    else
                        sed -i "/$episode_id/d" "$histfile"
                        send_notification "Completed" "5000" "" "$title"
                    fi
                else
                    if grep -q -- "$media_id" "$histfile" 2>/dev/null; then
                        sed -i "/$media_id/d" "$histfile"
                        send_notification "Deleted from history" "5000" "" "$title"
                    fi
                    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" "$title" "$position" "$media_id" "$media_type" \
                        "$season_id" "$episode_id" "$season_title" "$episode_title" "$data_id" "$image_link" >>"$histfile"
                    send_notification "Saved to history" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$title"
                fi
                ;;
            *) notify-send "Error" "Unknown media type" ;;
        esac
    }
    # TODO: Add image_preview support
    play_from_history() {
        [ ! -f "$histfile" ] && send_notification "No history file found" "5000" "" && exit 1
        [ "$watched_history" = 1 ] && exit 0
        watched_history=1
        choice=$(sed -n "1h;1!{x;H;};\${g;p;}" "$histfile" | nl -w 1 | nth "Choose an entry: ")
        [ -z "$choice" ] && exit 1
        media_type=$(printf "%s" "$choice" | cut -f4)
        title=$(printf "%s" "$choice" | cut -f1)
        resume_from=$(printf "%s" "$choice" | cut -f2)
        media_id=$(printf "%s" "$choice" | cut -f3)
        if [ "$media_type" = "tv" ]; then
            season_id=$(printf "%s" "$choice" | cut -f5)
            episode_id=$(printf "%s" "$choice" | cut -f6)
            season_title=$(printf "%s" "$choice" | cut -f7)
            episode_title=$(printf "%s" "$choice" | cut -f8)
            data_id=$(printf "%s" "$choice" | cut -f9)
            image_link=$(printf "%s" "$choice" | cut -f10)
            choose_episode
        fi
        keep_running="true" && loop
    }

    save_progress() {
        position=$(cat "$watchlater_dir/"* 2>/dev/null | grep -A1 "$video_link" | sed -nE "s@start=([0-9.]*)@\1@p" | cut -d'.' -f1)
        if [ -n "$position" ]; then
            progress=$((position * 100 / total_duration))
            position=$(printf "%02d:%02d:%02d" $((position / 3600)) $((position / 60 % 60)) $((position % 60)))
            send_notification "Stopped at" "5000" "$images_cache_dir/  $title ($media_type)  $media_id.jpg" "$position"
        fi
    }
    play_video() {
        [ "$media_type" = "tv" ] && displayed_title="$title - $season_title - $episode_title" || displayed_title="$title"
        case $player in
            vlc)
                vlc_subs_links=$(printf "%s" "$subs_links" | sed 's/https\\:/https:/g; s/:\([^\/]\)/#\1/g')
                vlc "$video_link" --meta-title "$displayed_title" --input-slave="$vlc_subs_links"
                ;;
            mpv)
                [ -z "$continue_choice" ] && check_history
                player_cmd="mpv"
                [ -n "$resume_from" ] && player_cmd="$player_cmd --start='$resume_from'"
                [ -n "$subs_links" ] && player_cmd="$player_cmd $subs_arg='$subs_links'"
                # Escape ' symbols in titles to prevent unterminated string error
                escaped_title=$(printf "%s" "$displayed_title" | "sed" "s/'/'\\\\''/g")
                player_cmd="$player_cmd --force-media-title='$escaped_title' '$video_link' --watch-later-directory='$watchlater_dir' --write-filename-in-watch-later-config --save-position-on-quit --quiet"
                
                # Check if the system supports Unix domain sockets
                if command -v nc >/dev/null 2>&1 && [ -S "$lobster_socket" ] 2>/dev/null; then
                    player_cmd="$player_cmd --input-ipc-server='$lobster_socket'"
                fi

                # Use eval to properly handle spaces in the command
                eval "$player_cmd" >&3 &

                if [ -z "$quality" ]; then
                    link=$(printf "%s" "$video_link" | sed "s/\/playlist.m3u8/\/1080\/index.m3u8/g")
                else
                    link=$video_link
                fi

                content=$(curl -s "$link")
                durations=$(printf "%s" "$content" | grep -oE 'EXTINF:[0-9.]+,' | cut -d':' -f2 | tr -d ',')
                total_duration=$(printf "%s" "$durations" | xargs echo | awk '{for(i=1;i<=NF;i++)sum+=$i} END {print sum}' | cut -d'.' -f1)
                
                wait
                save_progress
                ;;
            *) $player "$video_link" ;;
        esac
    }

    choose_from_trending_or_recent() {
        path=$1
        section=$2
        if [ "$path" = "home" ]; then
            response=$(curl -s "https://${base}/${path}" | sed -n "/id=\"${section}\"/,/class=\"block_area block_area_home section-id-02\"/p" | sed ':a;N;$!ba;s/\n//g;s/class="flw-item"/\n/g' |
                sed -nE "s@.*img data-src=\"([^\"]*)\".*<a href=\".*/(tv|movie)/watch-.*-([0-9]*)\".*title=\"([^\"]*)\".*class=\"fdi-item\">([^<]*)</span>.*@\1\t\3\t\2\t\4 [\5]@p" | $hxunent)
        else
            response=$(curl -s "https://${base}/${path}" | sed ':a;N;$!ba;s/\n//g;s/class="flw-item"/\n/g' |
                sed -nE "s@.*img data-src=\"([^\"]*)\".*<a href=\".*/(tv|movie)/watch-.*-([0-9]*)\".*title=\"([^\"]*)\".*class=\"fdi-item\">([^<]*)</span>.*@\1\t\3\t\2\t\4 [\5]@p" | $hxunent)
        fi
        main
    }

    ### Main ###
    loop() {
        while [ "$keep_running" = "true" ]; do
            get_embed
            [ -z "$embed_link" ] && exit 1
            get_json
            [ -z "$video_link" ] && exit 1
            play_video
            if [ -n "$position" ] && [ "$history" = "true" ]; then
                save_history
            fi
            prompt_to_continue
            case "$continue_choice" in
                "Next episode")
                    resume_from=""
                    next_episode_exists
                    if [ -n "$next_episode" ]; then
                        episode_title=$(printf "%s" "$next_episode" | cut -f1)
                        data_id=$(printf "%s" "$next_episode" | cut -f2)
                        episode_id=$(curl -s "https://${base}/ajax/v2/episode/servers/${data_id}" | sed ':a;N;$!ba;s/\n//g;s/class="nav-item"/\n/g' | sed -nE "s@.*data-id=\"([0-9]*)\".*title=\"([^\"]*)\".*@\1\t\2@p" | grep "$provider" | cut -f1)
                        send_notification "Watching the next episode" "5000" "" "$episode_title"
                    else
                        send_notification "No more episodes" "5000" "" "$title"
                        exit 0
                    fi
                    continue
                    ;;
                "Replay episode")
                    resume_from=""
                    continue
                    ;;
                "Search")
                    rm -f "$images_cache_dir"/*
                    query=""
                    response=""
                    season_id=""
                    episode_id=""
                    episode_title=""
                    title=""
                    data_id=""
                    resume_from=""
                    main
                    ;;
                *) keep_running="false" && exit ;;
            esac
        done
    }
    main() {
        if [ -z "$response" ]; then
            [ -z "$query" ] && get_input
            search "$query"
            [ -z "$response" ] && exit 1
        fi
        if [ "$image_preview" = "true" ]; then
            if [ "$use_external_menu" = "false" ] && [ "$use_ueberzugpp" = "true" ]; then
                command -v "ueberzugpp" >/dev/null || send_notification "Please install ueberzugpp if you want to use it for image previews"
                use_ueberzugpp="false"
            fi
            download_thumbnails "$response" "3"
            select_desktop_entry ""
        else
            if [ "$use_external_menu" = "true" ]; then
                choice=$(printf "%s" "$response" | rofi -dmenu -i -p "" -mesg "Choose a Movie or TV Show" -display-columns 4)
            else
                choice=$(printf "%s" "$response" | fzf --reverse --with-nth 4 -d "\t" --header "Choose a Movie or TV Show")
            fi
            image_link=$(printf "%s" "$choice" | cut -f1)
            media_id=$(printf "%s" "$choice" | cut -f2)
            title=$(printf "%s" "$choice" | sed -nE "s@.* *(tv|movie)[[:space:]]*(.*) \[.*\]@\2@p")
            media_type=$(printf "%s" "$choice" | sed -nE "s@.* *(tv|movie)[[:space:]]*(.*) \[.*\]@\1@p")
        fi
        [ "$media_type" = "tv" ] && choose_episode
        keep_running="true"
        loop
    }

    query=""
    # Command line arguments parsing
    while [ $# -gt 0 ]; do
        case "$1" in
            --)
                shift
                query="$*"
                break
                ;;
            # TODO: don't immediately exit if --continue is passed, since this ignores other arguments as soon as -c or --continue is found
            -c | --continue) play_from_history && exit ;;
            -r | --recent)
                recent="$2"
                if [ -z "$recent" ]; then
                    recent="movie"
                    shift
                else
                    if [ "${recent#-}" != "$recent" ]; then
                        recent="movie"
                        shift
                    else
                        shift 2
                    fi
                fi
                ;;
            -t | --trending) trending="1" && shift ;;
            *)
                if [ "${1#-}" != "$1" ]; then
                    query="$query $1"
                else
                    query="$query $1"
                fi
                shift
                ;;
        esac
    done
    query="$(printf "%s" "$query" | tr ' ' '-' | sed "s/^-//g")"
    if [ "$image_preview" = "true" ]; then
        test -d "$images_cache_dir" || mkdir -p "$images_cache_dir"
        if [ "$use_external_menu" = "true" ]; then
            mkdir -p "$tmp_dir/applications/"
            [ ! -L "$applications" ] && ln -sf "$tmp_dir/applications/" "$applications"
        fi
    fi
    [ "$trending" = "1" ] && choose_from_trending_or_recent "home" "trending-movies"
    [ "$recent" = "movie" ] && choose_from_trending_or_recent "movie" ""
    [ "$recent" = "tv" ] && choose_from_trending_or_recent "tv-show" ""

    main

} 2>&1 | tee "$lobster_logfile" >&3 2>&4
exec 1>&3 2>&4

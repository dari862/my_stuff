#!/bin/bash
# if this line exist script will be part of hub script.
# if this line exist script will be part of gui scripts.new_name=Beep_Me_In

#    beepmein-pipemenu - a beepmein pipe menu for jgmenu
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
unalias -a

. "$__distro_path_lib"
HELP="    beepmein-pipemenu a beepmein pipe menu for jgmenu

Usage: (standalone) beepmein-pipemenu | jgmenu --vsimple --at-pointer
        (or use --standalone option)

    It can be called from a tint2 button, launcher or jgmenu menu.

Options:
    -h --help
        show this message

    -s --standalone
        call jgmenu directly

    If beepmein-pipemenu is called with no options,
    it will output a jgmenu pipemenu for using the beepmein alarm clock.

    The standalone option can be used to start the menu from a launcher
    like a tint2 button instead of incorporating it in a menu.

Example:
    To launch from the tint2 clock right-click action:
clock_rclick_command = beepmein-pipemenu --standalone

See also:
    beepmein(1)
"

if command -v gmrun >/dev/null 2>&1;then
	runner_menu_="gmrun"
else
	runner_menu_="rofi-url-handler"
fi

title="beepmein Alarm Clock (Time is now: $(date +%R))"
	
# for display purposes
future="$(date -d "+5 minutes" +%R)"

# for timeToEvent()
now="$(date +%s)"

# timeToEvent
timeToEvent() {
   	# job Event time
  	event="$1"
   	if [[ "$event" ]];then

       	event="$(date -d "$event" +%s)"
       	diff=$(( event - now ))

       	# And show as HH:MM:SS, only if less than 24 hours
       	# 24 hours is 86400 seconds
       	if (( diff < 86400 ));then
           	date -u -d @${diff} +%T
       	fi
   	fi
}
export -f timeToEvent

check_queue_(){
	lines="$(atq | wc -l)"
	if (( lines > 0 )) ;then
		if [ "$jgmenu_exist" ];then
			echo "^sep(Click to remove from queue:)"
		fi
    	# This is the actual line by line loop
    	atq | sort -r | while read -r job nameday month day clock year queue _ ; do
        	if [[ "$queue" == "=" ]];then
            	time_till_alarm="now"
        	else
            	# get diff
				time_till_alarm="$(timeToEvent "$nameday $month $day $clock $year")"
        	fi
        	   	
        	if [ "$jgmenu_exist" ];then
				echo -e "X $clock ($month-$day) \t ${time_till_alarm}, atrm $job"
			else
				echo "false" >> ${queue_tmp_file_}
				echo "$job" >> ${queue_tmp_file_}
				echo -e "$clock ($month-$day)	${time_till_alarm}" >> ${queue_tmp_file_}
			fi			
    	done	
	fi
}
export -f check_queue_

kill_queue_(){
	_event_="$1"
	_job_="$(echo ${_event_} | cut -d ' ' -f1)"
	atrm "$_job_"
}
export -f kill_queue_
	
menu_picker_(){
	if command -v jgmenu >/dev/null 2>&1;then
		use_jgmenu_
	elif command -v yad >/dev/null 2>&1;then
		use_yad_
	fi
}

_prepare_config_dir(){
	config="$HOME/.cache/beepmein"
	mkdir -p "$config" || echo "$config not found, warning."
	
	# softlinks to audio samples
	alarmSample="$config/alarm"     # longer sample
	reminderSample="$config/remind" # shorter sample
	
	if [[ ! -f "$alarmSample" ]];then
		if command -v yad >/dev/null 2>&1 ;then
			yad --center --image="dialog-question" \
  					--title "Alert" \
  					--text "$alarmSample does not exist genertating one" \
					--button="Ok" && beepmein --set-alarm
		elif command -v gmrun >/dev/null 2>&1 ;then
			echo "$alarmSample does not exist genertating one" && beepmein --set-alarm
		fi
	fi
	
	if [[ ! -f "$reminderSample" ]];then
		if command -v yad >/dev/null 2>&1 ;then
			yad --center --image="dialog-question" \
  					--title "Alert" \
  					--text "$reminderSample does not exist genertating one" \
  					--button="Ok" && beepmein --set-remind
		elif command -v gmrun >/dev/null 2>&1 ;then
			echo "$reminderSample does not exist genertating one" && beepmein --set-remind
		fi
	fi
}

check_dependency_(){
	check_4_dependencies_if_installed at rofi yad speaker-test || exit 1
}

List_Alarms_2_Remove(){
	# Remove Alarms
	queue_tmp_file_=$(mktemp --tmpdir beepmein-tab2.XXXXXXXX)
	check_queue_
	
	yad_results=$(mktemp --tmpdir beepmein-tab2.XXXXXXXX) 

	cat $queue_tmp_file_ | yad --window-icon=${__distro_path_root}/Distro_Specific/icons/linux.svg --width=640 --height=500 --title="List Alarms" --image="gtk-execute" --uri-handler=xdg-open \
								--list --print-all --bool-fmt="t" --checklist --column="check" --column="Job" --column="Time"\
								--button=Cancel:1 --button=OK:10 > $yad_results
								
	if [[ "$?" -eq 10 ]];then
		yad_check_results=$(mktemp --tmpdir beepmein-tab2.XXXXXXXX)
		sed -i 's/TRUE|/atrm /g' ${yad_results} 2>/dev/null
		sed -i '/^FALSE/d' ${yad_results} 2>/dev/null
		awk -F'|' '{print $1}' ${yad_results} > ${yad_check_results}
		bash ${yad_check_results}
		rm -f ${yad_check_results}
	fi
	rm -f ${queue_tmp_file_} ${yad_results}
}
export -f List_Alarms_2_Remove

use_jgmenu_(){

	check_dependency_
	
	_prepare_config_dir
	
	# redirect stdout from this point
	exec > >( jgmenu --simple --config-file=<( sed '/menu_padding_top/ { s/^/#/ }; $ a tabs = 0' ~/.config/jgmenu/jgmenurc ) )

	# start to display jgmenu
	echo "${title},popup_terminal beepmein 'beepmein -h; echo \"Press any key to close\"; read -srn1' "

	# action
	echo "＋ Reminder in 1 min., beepmein --nr 1"
	echo "＋ Reminder in 5 min., beepmein --nr 5"
	echo "＋ Reminder in 15 min (edit), ${runner_menu_} 'beepmein 15'"
	echo "＋ Reminder @ $future (edit), ${runner_menu_} 'beepmein $future'"
	echo "＋ Alarm @ $future (edit), ${runner_menu_} 'beepmein $future --alarm'"
	echo "＋ Alarm @ morning (edit), ${runner_menu_} 'beepmein 7:00 --alarm'"
	echo "◼  Stop all playback, killall beepmein"
	echo "Set sounds,^checkout(Set sounds:)"
	
	check_queue_
	
	echo "^tag(Set sounds:)"
	echo "Set Alarm sound, beepmein --set-alarm"
	echo "▶  Alarm test, beepmein --reaction --alarm alarm"
	echo "Set Reminder sound, beepmein --set-remind"
	echo "▶  Reminder test, beepmein --reaction reminder"
}

use_yad_(){

	check_dependency_
	_prepare_config_dir

	KEY=$RANDOM

	res1=$(mktemp --tmpdir beepmein-tab1.XXXXXXXX)
	res2=$(mktemp --tmpdir beepmein-tab2.XXXXXXXX)
    out=$(mktemp --tmpdir beepmein-out.XXXXXXXX)
	
	# cleanup
	trap "rm -f $res1 $res2 $out" EXIT

	# action
	# Set Alarms
	yad --plug=$KEY --tabnum=1 --borders=10 \
	--text="Set Alarms \n" --image=conky \
	--form \
	--field="＋ Reminder in 1 min.:FBTN" "beepmein --nr 1" \
	--field="＋ Reminder in 5 min.:FBTN" "beepmein --nr 5" \
	--field="＋ Reminder in 15 min (edit):FBTN" "${runner_menu_} beepmein 15" \
	--field="＋ Reminder @ $future (edit):FBTN" "${runner_menu_} beepmein $future" \
	--field="＋ Alarm @ $future (edit):FBTN" "${runner_menu_} beepmein $future --alarm" \
	--field="＋ Alarm @ morning (edit):FBTN" "${runner_menu_} beepmein 7:00 --alarm" \
	--field="◼  Stop all playback:FBTN" "killall beepmein" \
	--field="List Alarms:FBTN" "bash -c List_Alarms_2_Remove" \
	> $res1 &
	
	# Set sounds
	yad --plug=$KEY --tabnum=2 --borders=10 \
	--text="Set sounds \n" --image=conky \
	--form \
	--field="Set Alarm sound:FBTN" "beepmein --set-alarm" \
	--field="▶  Alarm test:FBTN" "beepmein --reaction --alarm alarm" \
	--field="Set Reminder sound:FBTN" "beepmein --set-remind" \
	--field="▶  Reminder test:FBTN" "beepmein --reaction reminder" \
	> $res2 &

	#main window
	yad --notebook --tab-pos="left" --key=$KEY \
    --tab="Set Alarms" \
    --tab="Set sounds" \
    --title="$title" --image=${__distro_path_root}/icons/linux.png \
    --width="720" --height="420" --image-on-top --text-justify=right --text="$MCC"  --no-buttons > $out &
}

case "$i" in
	-h|--help)
		echo "$HELP"
		exit 0
	;;
	-y|--yad)
		use_yad_
	;;
	-j|--jgmenu)
		use_jgmenu_
	;;
	-s|--standalone)
		menu_picker_
	;;
	*)
		menu_picker_
	;;
esac

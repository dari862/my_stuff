#!/bin/sh

. "$__distro_path_lib"

init_color_temperature_adjuster() {
	create_config_file(){
		[ -f "${__distro_path_root}/system_files/skel/.config/${_command}/${_config_name}" ] && return
		latlong=$(get_latlong)
		lat_="${latlong%,*}"
		long_="${latlong#*,}"
		
		mkdir -p "${__distro_path_root}/system_files/skel/.config/${_command}"
		
		tee "${__distro_path_root}/system_files/skel/.config/${_command}/${_config_name}" <<-EOF > /dev/null 2>&1
			[general]
			temp-day=5700
			temp-night=3600
			gamma=0.8
			adjustment-method=randr
			location-provider=manual
			
			[manual]
			lat=$lat_
			lon=$long_
		EOF
	}
	
	create_tray_gammastep(){
		[ -f "${__distro_path_root}/system_files/bin/tray_gammastep" ] && return
		tee "${__distro_path_root}/system_files/bin/tray_gammastep" <<-EOF > /dev/null 2>&1
		#!/bin/sh
		yad --notification \
			--image="gtk-zoom-fit" \
			--icon-size=22 \
			--command="color_temperature_adjuster_gui" \
			--text="Gammastep"
		EOF
		chmod +x tee "${__distro_path_root}/system_files/bin/tray_gammastep"
	}
	
	create_daemon_file(){
		[ -f "${__distro_path_root}/system_files/skel/.config/autostartscripts/${_command}.sh" ] && return
		tee "${__distro_path_root}/system_files/skel/.config/autostartscripts/${_command}.sh" <<-EOF > /dev/null 2>&1
		#!/bin/sh
		/usr/bin/${_command}
		tray_gammastep
		EOF
		chmod +x "${__distro_path_root}/system_files/skel/.config/autostartscripts/${_command}.sh"
	}
	
	create_config_file
	create_tray_gammastep
	create_daemon_file
		
	for d in /home/*/ ; do
		[ "$(dirname "$d")" = "/home" ] && ! id "$(basename "$d")" >/dev/null 2>&1 && continue # Skip dirs that no are homes
		user_and_group=$(stat "$(dirname "$d/.config")" -c %u:%g)
		# Create config folders if no exists
		d="$d/.config/autostart"; [ ! -d "$d" ] && mkdir -v -p "$d" && cp -r "${__distro_path_root}/system_files/skel/.config/autostartscripts/${_command}.sh" "$d" && chown -R $user_and_group "$d"
		d="$d/.config/redshift"; [ ! -d "$d" ] && mkdir -v -p "$d" && cp -r "${__distro_path_root}/system_files/skel/.config/${_command}/${_config_name}" "$d" && chown -R $user_and_group "$d"
	done
}

exit_now=false
_mode=""

if [ "${1:-}" = "--init" ];then
	_mode="init"
	 if [ -n "${2:-}" ];then
	 	_command="$app_name"
	 else
		if command -v redshift >/dev/null 2>&1;then
			_command="redshift"
		elif command -v gammastep >/dev/null 2>&1;then
			_command="gammastep"
		else
			echo "redshift or gammastep not installed"
			exit 1
		fi
	fi
elif command -v redshift >/dev/null 2>&1;then
	_command="redshift"
elif command -v gammastep >/dev/null 2>&1;then
	_command="gammastep"
else
	echo "redshift or gammastep not installed"
	exit 1
fi

if [ "$_command" = "redshift" ];then
	_name="redshift"
	_title="Redshift"
	_config_name="redshift.conf"
if [ "$_command" = "gammastep" ];then
	_name="gammastep"
	_title="Gammastep"
	_config_name="config.ini"
fi

if [ "$_mode" = "init" ];then
	init_color_temperature_adjuster && exit 0
	exit 1
else
	[ ! -f "${__distro_path_root}/system_files/skel/.config/autostartscripts/${_command}.sh" ] && echo "File does not exist: ${__distro_path_root}/system_files/skel/.config/autostartscripts/${_command}.sh" && exit_now=true
	[ ! -f "${__distro_path_root}/system_files/bin/tray_gammastep" ] && echo "File does not exist: ${__distro_path_root}/system_files/bin/tray_gammastep" && exit_now=true
	[ ! -f "${__distro_path_root}/system_files/skel/.config/${_command}/${_config_name}" ] && echo "File does not exist: ${__distro_path_root}/system_files/skel/.config/${_command}/${_config_name}" && exit_now=true
	if [ "$exit_now" = true ];then
		echo "Run my-superuser color_temperature_adjuster_gui --init"
		exit 1
	fi
fi

_Enabled="$(pgrep -l ${_command} >/dev/null 2>&1 && echo TRUE || echo FALSE)"
_Autostart="$(service_manager is-enable ${_name}.service && echo TRUE || echo FALSE)"

[ ! -d "$HOME/.config/${_name}" ] && mkdir -p "$HOME/.config/${_name}"
[ ! -f "$HOME/.config/${_name}/${_config_name}" ] && cp -r "${__distro_path_root}/system_files/skel/.config/${_command}/${_config_name}" "$HOME/.config/${_name}/${_config_name}"

Set_(){
	_lat="$(grep "lat=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	_lon="$(grep "lon=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	temp_day="$(grep "temp-day=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	temp_night="$(grep "temp-night=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	save_(){
		_lat="$(echo "${_yad_output}" | awk -F'|' '{print $1}')"
		_lon="$(echo "${_yad_output}" | awk -F'|' '{print $2}')"
		temp_day="$(echo "${_yad_output}" | awk -F'|' '{print $3}')"
		temp_night="$(echo "${_yad_output}" | awk -F'|' '{print $4}')"
		sed -i "s/lat=*/lat=${_lat}/g" "$HOME/.config/${_name}/${_config_name}"
		sed -i "s/lon=*/lon=${_lon}/g" "$HOME/.config/${_name}/${_config_name}"
		sed -i "s/temp_day=*/temp_day=${temp_day}/g" "$HOME/.config/${_name}/${_config_name}"
		sed -i "s/temp_night=*/temp_night=${temp_night}/g" "$HOME/.config/${_name}/${_config_name}"
	}
	_yad_output="$(yad	--form --title="${_title}" --image=${_name} \
    	--scroll --center --width="250" --height="250" --image-on-top --text-justify=right \
    	--field="_lat" "${_lat}" \
    	--field="_lon" "${_lon}" \
    	--field="temp_day" "${temp_day}" \
    	--field="temp_night" "${temp_night}" \
    	--button="Save":10 \
    	--button="Exit":20)"
	exval=$?
	case $exval in
       		10) save_ && main_yad;;
       		20|252) exit;;
	esac
}

Info_(){
	Status="$(pgrep -l ${_command} >/dev/null 2>&1 && echo Enabled || echo Disabled)"
	lat="$(grep "lat=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	lon="$(grep "lon=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	Location="$(echo "${lat}:${lon}")"
	temp_day="$(grep "temp-day=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	temp_night="$(grep "temp-night=" "$HOME/.config/${_name}/${_config_name}" | awk -F= '{print $2}')"
	Color_Temperature="$(echo "${temp_day}:${temp_night}")"
	Period="$()"
	yad --form --on-top\
		--title="${_title} Info" \
		--text="Status:${Status} 
Location:${Location} 
Color Temperature:${Color_Temperature} 
Period:${Period}
" \
		--image=${_name}

}

Save_(){
	kill_commnad(){
		kill_process.sh ${_command}
	}
	Suspend_command(){
		sleep ${1}m && ${_command}
	}
	_Enabled="$(echo "${_yad_output}" | awk -F'|' '{print $1}')"
	Suspend_for="$(echo "${_yad_output}" | awk -F'|' '{print $2}')"
	_Autostart="$(echo "${_yad_output}" | awk -F'|' '{print $3}')"

	if [ "$_Autostart" = "TRUE" ];then
		service_manager enable user ${_name}.service
	else
		service_manager disable user ${_name}.service
	fi
	
	if [ "$_Enabled" = "FALSE" ];then
		kill_commnad
	fi
	
	if [ "$Suspend_for" = "30 min" ];then
		kill_commnad
		Suspend_command 30
	elif [ "$Suspend_for" = "1 Hour" ];then
		kill_commnad
		Suspend_command 60
	elif [ "$Suspend_for" = "2 Hour" ];then
		kill_commnad
		Suspend_command 120
	elif [ "$_Enabled" = "TRUE" ];then
		${_command}
	fi
}

main_yad(){
	_yad_output="$(yad	--form --title="${_title}" --image=${_name} \
    	--scroll --center --width="200" --height="200" --image-on-top --text-justify=right \
    	--field="Enable":CHK "${_Enabled}" \
    	--field="Suspend for:cb" "!30 min!1 Hour!2 Hour" \
    	--field="Autostart":CHK "${_Autostart}" \
    	--button="Info!gtk-yes":10 \
    	--button="Set ${_title} config!gtk-yes":20 \
    	--button="Save":30 \
    	--button="Exit":200)"
	exval=$?
	case $exval in
       		10) Info_ && main_yad;;
       		20) Set_ && main_yad;;
       		30) Save_;;
       		200|252) exit;;
	esac
}

main_yad

#!/bin/bash
# if this line exist script will be part of hub script.
# work on vpn
unalias -a
. "$__distro_path_lib"
. "${__distro_path_root}/lib/common/WM"
. "${Distro_config_file}"

# Configuration
network_manager_script_config="${script_config_path}/network-manager-script.conf"
THEME_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/rofi/${ROFI_STYLE}/networkmenu.rasi"
DIRECTIONS=("Center" "Northwest" "North" "Northeast" "East" "Southeast" "South" "Southwest" "West")

function check_and_create_config_file() {
	[[ ! -d "$script_config_path" ]] && mkdir -p "$script_config_path"
	[[ -f "${network_manager_script_config}" ]] && return
	tee "${network_manager_script_config}" >/dev/null 2>&1 <<-'EOF'
	# Location
	# +---------- +
	# | 1 | 2 | 3 |
	# | 8 | 0 | 4 |
	# | 7 | 6 | 5 |
	# +-----------+
	#The grid represents the screen with the numbers indicating the location of the window.
	#If you want the window to be in the upper right corner, set location to 3.
	#default to 0
	LOCATION=0
	#This sets the anchor point for the window displaying the QR code.   
	#default to 0      
	QRCODE_LOCATION=0

	#Use notifications or not
	send_notification=true

	#Location of qrcode wifi image
	#default to '/tmp/$USER'
	QR_IMAGE='/tmp/$USER'

	#symbol
    LOCK_SYMBOL="🔒"
    UNLOCK_SYMBOL="🔓"
    REFRESH_SYMBOL="🔄"
    SETTINGS_SYMBOL="⚙️"
    SAVED_SYMBOL="💾"
    BACK_SYMBOL="⬅️"
    CONNECT_SYMBOL="▶️"
    FORGET_SYMBOL="❌"
    WIFI_SYMBOL="📶"
    WIRED_SYMBOL="🔌"
    LOOPBACK_SYMBOL="🔄"
    OTHER_SYMBOL="🔗"
    NETWORK_TOGGLE_SYMBOL="🔌"
    HIDDEN_NETWORK_SYMBOL="👻"
    CONNECTED_SYMBOL="✅"
    DISCONNECT_SYMBOL=""
    SHOWPASS_SYMBOL=""
    BLUETOOTH_SYMBOL=""
    EDIT_NM_SYMBOL=""
    QRENCODE_SYMBOL="󰐲"
	EOF
}

# Helper Functions
show_menu() {
    local options="$1"
    local prompt="$2"
    echo -e "$options" | rofi_cmd -dmenu -i -p "$prompt"
}

rofi_cmd() {
    rofi -theme "$THEME_FILE" -theme-str 'window{width:345px;location: ${DIRECTIONS[LOCATION]};}' "$@" -kb-cancel "Escape"
}

rofi_cmd_qrcode() {
    rofi  -dmenu -i -theme "$THEME_FILE" \
         -theme-str "window {
                        width: ${IMG_WIDTH}px;
                        height: ${IMG_HEIGHT}px;
                        background-image: url(\"${QR_IMAGE}/rofi_wifi_qr.png\", both);
                        border: 0;
                        padding: 0;
                        margin: 0;
                        location: ${DIRECTIONS[QRCODE_LOCATION]};
                    }" \
         -theme-str 'inputbar { enabled: false; }' \
         -theme-str 'mainbox { margin: 0; padding: 0; }' \
          -kb-cancel "Escape"
}

# Custom rofi command function for hidden network SSID input
rofi_cmd_hidden_ssid() {
    rofi -theme "$THEME_FILE" \
        -theme-str 'window{width:350px;location: ${DIRECTIONS[LOCATION]};}' \
        -theme-str 'mainbox{children:["message","inputbar"];}' \
        -theme-str 'inputbar{background-image:none; padding:10px;}' \
        -theme-str 'textbox{font:"JetBrains Mono Nerd Font Propo 10";padding:12px;expand:false;}' \
        -theme-str 'textbox-prompt-colon{background-color:	#6670ad;str:" 👻 ";padding:7px;}' \
        -theme-str 'textbox{background-color:#656291;}' \
        -theme-str 'entry{placeholder:"Enter hidden network name";padding:7px;}' \
        -theme-str 'listview{lines:0;}' \
        "$@" -kb-cancel "Escape"
 }

# Custom rofi command function for security selection
rofi_cmd_security() {
    rofi -theme "$THEME_FILE" \
        -theme-str 'window{width:345px;location: ${DIRECTIONS[LOCATION]};}' \
        -theme-str 'listview{columns:1; lines:3;}' \
        -theme-str 'element{padding:5px;}' \
        -theme-str 'element-text{font:"JetBrains Mono Nerd Font Propo 10";}' \
        -theme-str 'inputbar{background-image:none; padding:8px;}' \
        -theme-str 'textbox-prompt-colon{background-color:#6670ad;str:"  ";padding:8px;}' \
        "$@" -kb-cancel "Escape"
}

# Custom rofi command function for saved networks
rofi_cmd_saved() {
    rofi -theme "$THEME_FILE" \
        -theme-str 'window{width:345px;location: ${DIRECTIONS[LOCATION]};}' \
        -theme-str 'listview{columns:1;lines:5;}' \
        -theme-str 'element{padding:5px;}' \
        -theme-str 'element-text{font:"JetBrains Mono Nerd Font Propo 10";}' \
        -theme-str 'inputbar{background-image:none; padding:8px;}' \
        -theme-str 'textbox-prompt-colon{background-color:#6670ad;str:"  ";padding:8px;}' \
        "$@" -kb-cancel "Escape"
}

# Custom rofi command function for network actions (Connect/Forget/Back)
rofi_cmd_actions() {
    rofi -theme "$THEME_FILE" \
        -theme-str 'window{width:345px;location: ${DIRECTIONS[LOCATION]};}' \
        -theme-str 'listview{columns:1; lines:3; spacing:3px;}' \
        -theme-str 'element{padding:5px;}' \
        -theme-str 'element-text{font:"JetBrains Mono Nerd Font Propo 10";}' \
        -theme-str 'inputbar{background-image:none; padding:8px;}' \
        -theme-str 'textbox-prompt-colon{background-color:#6670ad;str:"  ";padding:8px;}' \
        "$@" -kb-cancel "Escape"
}

get_input() {
    local prompt="$1"
    local is_password="${2:-false}"
    local lines="${3:-0}"
    local network_name="${4:-}"
    
    if [[ "$is_password" == "true" ]]; then
        rofi_cmd -theme-str 'mainbox{children:["message","inputbar"];}'\
                 -theme-str 'inputbar{background-image:none;padding:7px;}'\
                 -theme-str 'message{margin:3px;}textbox{background-color:#656291;font:"JetBrains Mono Nerd Font Propo 10";padding:10px;expand:false;}'\
                 -theme-str 'textbox-prompt-colon{background-color:	#6670ad;str:"  ";}'\
                 -theme-str 'entry { placeholder:"Password";}'\
                 -theme-str 'listview{lines:0;}'\
                -dmenu -p "$prompt" -password -lines "$lines" -mesg "  | $network_name"
    else
        rofi_cmd -dmenu -p "$prompt" -lines "$lines" -p "@"
    fi
}

handle_escape() {
    local callback="$1"
    local input="$2"
    local network_name="${3:-}"
    
    if [[ -z "$input" ]]; then
        [[ -n "$network_name" ]] && notify_success "Cancelled" "Password entry cancelled for $network_name"
        $callback
        return 1
    fi
    return 0
}

notify() {
    [ "$send_notification" = false ] && return
    local title="$1"
    local message="$2"
    local urgency="${3:-normal}"
    notify-send -u "$urgency" "$title" "$message"
}

notify_success() {
    notify "$1" "$2" "normal"
}
notify_error() {
    notify "$1" "$2" "critical"
}
notify_info() {
    notify "$1" "$2" "low"
}

# Network Functions
get_current_wifi_ssid() {
    nmcli -t -f active,ssid dev wifi | grep '^yes:' | cut -d: -f2
}

get_active_wifi_connection() {
    nmcli -t -f NAME,TYPE connection show --active | grep "802-11-wireless" | head -1 | cut -d: -f1
}

format_network_line() {
    local line="$1"
    local current_ssid="$2"
    local security=$(echo "$line" | awk '{print $3}')
    local symbol="$([[ "$security" == "--" ]] && echo "$UNLOCK_SYMBOL" || echo "$LOCK_SYMBOL")"
    local ssid=$(echo "$line" | awk '{print $1}')
    local rest=$(echo "$line" | cut -d' ' -f2-)
    
    # Check if this is the currently connected network
    if [[ "$ssid" == "$current_ssid" ]]; then
        echo "$CONNECTED_SYMBOL $ssid $rest"
    else
        echo "$symbol $ssid $rest"
    fi
}

get_networks() {
    local current_ssid=$(get_current_wifi_ssid)
    
    echo " SSID                       BSSID        SECURITY   BARS  SIGNAL  BANDWIDTH  MODE  CHAN    RATE"
     
    nmcli -f SSID,BSSID,SECURITY,BARS,SIGNAL,BANDWIDTH,MODE,CHAN,RATE device wifi list | awk 'NR==1 || $1 != "--"' | tail -n +2 | while read -r line; do
        format_network_line "$line" "$current_ssid"
    done
}

get_saved_networks() {
    nmcli -g NAME,UUID,TYPE connection show | sort | while IFS=: read -r name uuid type; do
        case "$type" in
            "802-11-wireless") echo "$WIFI_SYMBOL $name" ;;
            "802-3-ethernet") echo "$WIRED_SYMBOL $name" ;;
            "loopback"|"lo") echo "$LOOPBACK_SYMBOL $name" ;;
            *) echo "$OTHER_SYMBOL $name" ;;
        esac
    done
}

# connect functions with retry logic
connect_with_password() {
    local ssid="$1"
    local prompt_text="${2:-Password}"
    
    while true; do
        local password=$(get_input "$prompt_text" true 0 "$ssid")
        handle_escape main "$password" "$ssid" || return
        
        notify_info "Connecting" "Connecting to $ssid..."
        
        if nmcli device wifi connect "$ssid" password "$password"; then
            notify_success "Connected" "Successfully connected to $ssid"
            return 0
        else
            notify_error "Connection Failed" "Wrong password for $ssid. Please try again."
            nmcli connection delete "$ssid" 2>/dev/null || true
            prompt_text="Wrong password! Try again"
        fi
    done
}

connect_to_network() {
    local selection="$1"
    
    if [[ "$selection" == *"SSID"* ]] || [[ "$selection" == *"‾‾‾‾"* ]] || [[ "$selection" == *"͟ ͟ ͟"* ]]; then
        main
        return
    fi
    
    selection=$(echo "$selection" | sed -E "s/^[^ ]+ //")
    local bssid=$(echo "$selection" | grep -o -E "([0-9A-F]{2}:){5}[0-9A-F]{2}")
    local ssid=$(echo "$selection" | sed -E "s/(.*)$bssid.*/\1/" | xargs)
    
    [[ -z "$ssid" ]] && exit 1
    
    # Check if network is already saved
    if nmcli connection show | grep -q "^$ssid "; then
        notify_info "Connecting" "Connecting to saved network $ssid..."
        if nmcli connection up "$ssid"; then
            notify_success "Connected" "Successfully connected to $ssid"
        else
            notify_error "Connection Failed" "Failed to connect to $ssid"
        fi
        return
    fi
    
    local security=$(echo "$selection" | grep -o -E "(WPA|WEP|WPA2|--)")
    
    if [[ "$security" != "--" ]]; then
        connect_with_password "$ssid"
    else
        notify_info "Connecting" "Connecting to $ssid..."
        if nmcli device wifi connect "$ssid"; then
            notify_success "Connected" "Successfully connected to $ssid"
        else
            notify_error "Connection Failed" "Failed to connect to $ssid"
        fi
    fi
}

disconnect_wifi() {
    local active_connection=$(nmcli -t -f NAME,TYPE connection show --active | grep "802-11-wireless" | head -1 | cut -d: -f1)
    
    if [[ -n "$active_connection" ]]; then
        if nmcli connection down "$active_connection"; then
            notify_success "Disconnected" "WiFi disconnected successfully"

            sleep 0.5
        else
            notify_error "Error" "Failed to disconnect WiFi"
        fi
    else

        local wifi_device=$(nmcli device status | grep "wifi.*connected" | awk '{print $1}' | head -1)
        if [[ -n "$wifi_device" ]]; then
            if nmcli device disconnect "$wifi_device"; then
                notify_success "Disconnected" "WiFi disconnected successfully"
                sleep 0.5
            else
                notify_error "Error" "Failed to disconnect WiFi device"
            fi
        else
            notify_success "No Connection" "No active WiFi connection found"
        fi
    fi
    exit 0
}

connect_hidden_network() {
    # Use custom rofi command for SSID input
    local ssid=$(rofi_cmd_hidden_ssid -dmenu -p "Hidden Network" -lines 0 -mesg "👻 | Enter SSID name")
    handle_escape main "$ssid" || return
    
    # Use custom rofi command for security selection
    local security=$(echo -e "WPA/WPA2\nWEP\nNone" | rofi_cmd_security -dmenu -i -p "Security")
    handle_escape main "$security" || return
    
    if [[ "$security" != "None" ]]; then
        while true; do
            local password=$(get_input "Password" true 0 "$ssid")
            handle_escape main "$password" "$ssid" || return
            
            notify_info "Connecting" "Connecting to hidden network $ssid..."
            
            local connect_output
            connect_output=$(nmcli device wifi connect "$ssid" password "$password" hidden yes 2>&1)
            local exit_code=$?
            
            if [[ $exit_code -eq 0 ]]; then
                notify_error "Connected" "Successfully connected to hidden network $ssid"
                return 0
            else
                if echo "$connect_output" | grep -q "No network with SSID"; then
                    notify_error "Network Not Found" "Hidden network does not exist or is not in range ($ssid)"
                    return 1
                else
                    notify_error "Connection Failed" "Wrong password for $ssid. Please try again."
                fi
            fi
        done
    else
        notify_info "Connecting" "Connecting to hidden network $ssid..."
        local connect_output
        connect_output=$(nmcli device wifi connect "$ssid" hidden yes 2>&1)
        local exit_code=$?
        
        if [[ $exit_code -eq 0 ]]; then
            notify_success "Connected" "Successfully connected to hidden network $ssid"
        else
            if echo "$connect_output" | grep -q "No network with SSID"; then
                notify_error "Network Not Found" "Hidden network '$ssid' does not exist or is not in range"
            else
                notify_error "Connection Failed" "Failed to connect to hidden network $ssid"
            fi
        fi
    fi
}

show_saved_networks() {
    local saved=$(get_saved_networks)
    
    # Use custom rofi command for saved networks
    local selection=$(echo -e "$BACK_SYMBOL Back\n$saved" | rofi_cmd_saved -dmenu -i -p "Saved Networks")
    
    if ! handle_escape main "$selection" || [[ "$selection" == "$BACK_SYMBOL Back" ]]; then
        main
        return
    fi
    
    local network_name=$(echo "$selection" | sed -E "s/^[^ ]+ //")
    # Use custom rofi command for actions
    local action=$(echo -e "$CONNECT_SYMBOL Connect\n$FORGET_SYMBOL Forget\n$BACK_SYMBOL Back" | rofi_cmd_actions -dmenu -i -p "$network_name")
    
    if ! handle_escape show_saved_networks "$action" || [[ "$action" == "$BACK_SYMBOL Back" ]]; then
        show_saved_networks
        return
    fi
    
    case "$action" in
        "$CONNECT_SYMBOL Connect")
            notify_info "Connecting" "Connecting to $network_name..."
            if nmcli connection up "$network_name"; then
                notify_success "Connected" "Successfully connected to $network_name"
            else
                notify_error "Connection Failed" "Failed to connect to $network_name"
            fi
            ;;
        "$FORGET_SYMBOL Forget")
            if nmcli connection delete "$network_name"; then
                notify_success "Success" "Network $network_name has been forgotten"
            else
                notify_error "Error" "Failed to forget network $network_name"
            fi
            show_saved_networks
            ;;
    esac
}

generate_qrcode(){
    local ssid="${1:-}"
    local password="${2:-}"
    if [[ -z "$ssid" ]];then
        notify_error "Missing SSID" "Cannot generate QR code without SSID"
        return 1
    fi
    if [ -z "$password" ];then
        ssid_and_security="WIFI:S=$ssid;T:nopass;;"
    else
        ssid_and_security="WIFI:S:$ssid;T:$(nmcli dev wifi show-password | grep -oP '(?<=Security: ).*' | head -1);P:$password;;"
    fi
    qrencode -t PNG -l H -s 10 -m 3 -o "${QR_IMAGE}/rofi_wifi_qr.png" "$ssid_and_security"
    read IMG_WIDTH IMG_HEIGHT < <(identify -format "%w %h" "${QR_IMAGE}/rofi_wifi_qr.png")
    rofi_cmd_qrcode
    share_wifi_pass
}

show_wifi_list(){
    local networks=$(get_networks)
    local selection=$(show_menu "$networks\n$HIDDEN_NETWORK_SYMBOL Connect to Hidden Network\n$REFRESH_SYMBOL Refresh\n$BACK_SYMBOL Back" "WiFi Networks List")
    case "$selection" in
        "$REFRESH_SYMBOL Refresh")
            notify_info "Refreshing" "Scanning for networks..."
            nmcli device wifi rescan
            show_wifi_list
            ;;
        "$WIFI_SYMBOL Wifi list") show_wifi_list ;;
        "$HIDDEN_NETWORK_SYMBOL Connect to Hidden Network") connect_hidden_network ;;
        "$BACK_SYMBOL Back") main ;;
        *) connect_to_network "$selection" ;;
    esac
}

share_wifi_pass(){
    local ssid=$(nmcli dev wifi show-password | grep -oP '(?<=SSID: ).*')
    local password=$(nmcli dev wifi show-password | grep -oP '(?<=Password: ).*' | head -1)
    [[ -x "$(command -v qrencode)" ]] && local qrcode="\n$QRENCODE_SYMBOL generate qrcode"
    local selection=$(show_menu "SSID = $ssid\nPass = $password$qrcode\n$BACK_SYMBOL Back" "WiFi Networks List")
    case "$selection" in
        "$QRENCODE_SYMBOL generate qrcode") generate_qrcode "$ssid" "$password" ;;
        *) main;;
    esac
}

initialization() {
    check_and_create_config_file
    source "$network_manager_script_config"
    LOCK_SYMBOL="${LOCK_SYMBOL:-🔒}"
	UNLOCK_SYMBOL="${UNLOCK_SYMBOL:-🔓}"
	REFRESH_SYMBOL="${REFRESH_SYMBOL:-🔄}"
	SETTINGS_SYMBOL="${SETTINGS_SYMBOL:-⚙️}"
	SAVED_SYMBOL="${SAVED_SYMBOL:-💾}"
	BACK_SYMBOL="${BACK_SYMBOL:-⬅️}"
	CONNECT_SYMBOL="${CONNECT_SYMBOL:-▶️}"
	FORGET_SYMBOL="${FORGET_SYMBOL:-❌}"
	WIFI_SYMBOL="${WIFI_SYMBOL:-📶}"
	WIRED_SYMBOL="${WIRED_SYMBOL:-🔌}"
	LOOPBACK_SYMBOL="${LOOPBACK_SYMBOL:-🔄}"
	OTHER_SYMBOL="${OTHER_SYMBOL:-🔗}"
	NETWORK_TOGGLE_SYMBOL="${NETWORK_TOGGLE_SYMBOL:-🔌}"
	HIDDEN_NETWORK_SYMBOL="${HIDDEN_NETWORK_SYMBOL:-👻}"
	CONNECTED_SYMBOL="${CONNECTED_SYMBOL:-✅}"
	DISCONNECT_SYMBOL="${DISCONNECT_SYMBOL:-}"
	SHOWPASS_SYMBOL="${SHOWPASS_SYMBOL:-}"
	BLUETOOTH_SYMBOL="${BLUETOOTH_SYMBOL:-}"
	EDIT_NM_SYMBOL="${EDIT_NM_SYMBOL:-}"
	QRENCODE_SYMBOL="${QRENCODE_SYMBOL:-󰐲}"
    LOCATION=${LOCATION:-0}
    QRCODE_LOCATION=${QRCODE_LOCATION:-0}
    QR_IMAGE="${QR_IMAGE:-/tmp/$USER}"

    case "${send_notification,,}" in
        false|f|no|n) send_notification=false ;;
        *) send_notification=true ;;
    esac
    
    [[ -d /sys/class/bluetooth ]] && bluetoothopt="\n$BLUETOOTH_SYMBOL Bluetooth" || bluetoothopt=""
}

main() {
    local network_toggle_text="$([[ "$(nmcli networking)" == "enabled" ]] && echo "$NETWORK_TOGGLE_SYMBOL Disable Networking" || echo "$NETWORK_TOGGLE_SYMBOL Enable Networking")"
    
    local options="$network_toggle_text"

    # Force refresh device status and check more strictly for connected WiFi
    nmcli device status > /dev/null 2>&1
    if nmcli -t -f TYPE,STATE device status | grep -q "^wifi:connected$"; then
        connected_wifi="$(iwgetid -r)"
        options="$options\n$DISCONNECT_SYMBOL Disconnect from $connected_wifi\n$SHOWPASS_SYMBOL show wifi password"
    fi

    options="$WIFI_SYMBOL Wifi list\n$options\n$SAVED_SYMBOL Show Saved Networks$bluetoothopt"
    
    # Use custom rofi command for settings menu
    local selection=$(show_menu "$options" "WiFi Networks")
    
    if ! handle_escape exit "$selection"; then
        exit 0
    fi
    
    case "$selection" in
        "$NETWORK_TOGGLE_SYMBOL Disable Networking")
            if nmcli networking off; then
                notify_success "Networking Disabled" "All network connections have been disabled"
            else
                notify_error "Error" "Failed to disable networking"
            fi
            main
            ;;
        "$NETWORK_TOGGLE_SYMBOL Enable Networking")
            if nmcli networking on; then
                notify_success "Networking Enabled" "Network connections have been enabled"
            else
                notify_error "Error" "Failed to enable networking"
            fi
            main
            ;;
        "$DISCONNECT_SYMBOL Disconnect from $connected_wifi")disconnect_wifi ;;
        "$SAVED_SYMBOL Show Saved Networks") show_saved_networks ;;
        "$WIFI_SYMBOL Wifi list") show_wifi_list ;;
        "$SHOWPASS_SYMBOL show wifi password") share_wifi_pass ;;
        "$EDIT_NM_SYMBOL Open Connection Editor") nm-connection-editor ;;
        "$BLUETOOTH_SYMBOL bluethooth") rofi-bluetooth ;;
        *) exit ;;
    esac
}

initialization
main




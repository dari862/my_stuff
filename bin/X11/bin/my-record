#!/bin/sh
# Variables and functions
# work on trap
icons_dir="/usr/share/my_stuff/icons/dunst"

# File
time=$(date +%Y-%m-%d-%H-%M-%S)
dir="$(xdg-user-dir VIDEOS)/Screenrecorder"
file_name="Capture_${time}"
input_frame_rate=30
output_frame_rate=24
_audio=""
audio_arg=""
if command -v pulseaudio >/dev/null 2>&1;then
	_audio=pulse
	audio_arg=pulse
elif command -v alse >/dev/null 2>&1;then
	_audio=alsa
	audio_arg="alsa -thread_queue_size 1024"
fi

stop_rec() {
	pid_list=""
	ps_aux_ffmpeg_contant="$(ps aux | grep ffmpeg)"
	
	for f in $dir;do
		echo "$ps_aux_ffmpeg_contant" | grep -q "$f" && pid_list="$pid_list $(pgrep -f "$f")"
	done

	for pid in $pid_list; do
		# kill with SIGTERM, allowing finishing touches.
		if kill -15 $pid;then
			# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
    		sleep 3
    		kill -9 $pid >/dev/null 2>&1
    	fi
    done
    
    exit
}

# trap notify
notify_me() {
	notify_cmd="notify-send -u low -i ${icons_dir}/video.png"
	if [ -e "$file_path" ];then
		notify_massage="Saved in $dir"
	else
		notify_massage="Video Deleted."
	fi
	${notify_cmd} "$notify_massage"
}

# countdown
countdown() {
	for sec in $(seq "$1" -1 1); do
		notify-send -t 1000 -i "${icons_dir}/timer.png" "Starting in : $sec"
		sleep 1
	done
}

# capture
rec_screen() {
	if [ "$mode" = "area" ];then
		get_win_data=$(slop -f "%x %y %w %h %g %i") || exit 1
		# Parse the output into individual variables
		set -- $get_win_data
		X="$1"
		Y="$2"
		W="$3"
		H="$4"
		screen="${W}x${H}"
	else
		screen=$(xrandr | grep -oP '(?<=current ).*(?=,)' | tr -d ' ')
		X=0
		Y=0
	fi
	countdown 3
	sleep 1	
	if [ "$enable_audo" = true ];then
		ffmpeg -y -hide_banner -loglevel error -f x11grab \
			-video_size "${screen}" -i :0.0+${X},${Y} -r ${output_frame_rate} \
			-f $audio_arg -i default -c:v h264 -crf 0 -preset ultrafast -c:a aac \
			"${file_path}"
	else
		ffmpeg -hide_banner -loglevel error -f x11grab \
			-video_size "${screen}" -i :0.0+${X},${Y} -r ${output_frame_rate} \
			-c:v libx264 -qp 0 \
			"${file_path}"
	fi
	notify_me
}

audio() {
	ffmpeg -y \
	-f $_audio -i default \
	-c:a flac \
	"${file_path}"
	notify_me
}

webcam() {
	file_path="${dir}/${file_name}.mkv"
	ffmpeg -y \
	-f v4l2 \
	-i /dev/video0 \
	-video_size $vid_res_ \
	"${file_path}"
	notify_me
}

open_webcam(){
	mpv --untimed --no-cache --no-osc --no-input-default-bindings --profile=low-latency \
	--input-conf=/dev/null --title=webcam "$(ls /dev/video* 2>/dev/null | head -n 1)" >/dev/null 2>&1 || \
	notify-send "Cannot open webcam."
}

# Ensure the directory exists
if [ ! -d "$dir" ];then
	mkdir -p "$dir"
fi

# Parse command-line arguments
case "$1" in
	--screen)
		file_path="${dir}/${file_name}.mp4"
		enable_audo=true
		mode=""
		rec_screen &
		;;
	--area)
		file_path="${dir}/${file_name}.mp4"
		enable_audo=true
		mode="area"
		rec_screen &
		;;
	--screen-na)
		file_path="${dir}/${file_name}.mkv"
		enable_audo=false
		mode=""
		rec_screen &
		;;
	--area-na)
		file_path="${dir}/${file_name}.mkv"
		enable_audo=false
		mode="area"
		rec_screen &
		;;
	--audio)
		file_path="${dir}/${file_name}.flac"
		audio &
		;;
	--webcam)
		vid_res_="640x480"
		webcam &
		;;
	--webcam-hd)
		vid_res_="1920x1080"
		webcam &
		;;
	--open-webcam)
		open_webcam
		;;
	--stop)
		stop_rec
		;;
	*)
		echo "Usage: $0 {--screen|--area|--screen-na|--area-na}"
		exit 1
		;;
esac

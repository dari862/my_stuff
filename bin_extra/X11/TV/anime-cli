#!/bin/sh
set -e
unalias -a
. "$__distro_path_lib"
. "${__distro_path_root}/lib/common/WM"
tv_config_dir="${script_config_path}/My_TV"
tv_config_file="${tv_config_dir}/ani-cli.conf"

[ ! -d "${tv_config_dir}" ] && mkdir -p "$tv_config_dir" || :

if [ ! -f "$tv_config_file" ];then
    tee "$tv_config_file" <<- 'EOF' >/dev/null 2>&1
    #ani-cli version_number="4.10.0"
    # setup
    agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0"
    allanime_refr="https://allmanga.to"
    allanime_base="allanime.day"
    allanime_api="https://api.${allanime_base}"
    mode="sub"
    #mode="dub"
    log_episode="1"
    quality="best"
    player_function="mpv"
    #player_function="vlc"

    skip_intro=0
    no_detach="0"
    use_external_menu="auto"
    #use_external_menu="fzf"
    #use_external_menu=rofi
    external_menu_normal_window="0"
    hist_dir="${ANI_CLI_HIST_DIR:-${XDG_STATE_HOME:-$HOME/.local/state}/ani-cli}"
    histfile="$hist_dir/ani-hsts"
    search="scrape"
EOF
fi
. "$tv_config_file"

if [ "$use_external_menu" = "auto" ];then
	if [ -t 1 ];then # on terminal
		use_external_menu=fzf
	else
		use_external_menu=rofi
	fi
fi

[ ! -d "$hist_dir" ] && mkdir -p "$hist_dir" || :
[ ! -f "$histfile" ] && : >"$histfile" || :

if [ "$skip_intro" = 1 ];then
    if command -v ani-skip >/dev/null 2>&1;then
        mal_id="$(ani-skip -q "${skip_title:-${title}}")"
    else
        skip_intro=0
    fi
fi

if [ "$use_external_menu" = "fzf" ];then
	"${__distro_path_root}/bin/not_add_2_path"/check_4_dependencies_if_installed sed grep fzf $player_function || exit 1
	multi_selection_flag="-m"
	launcher() {
		if [ -z "$1" ];then
            set -- "+m" "$2"
        fi
		fzf "$1" --reverse --cycle --prompt "$2"
	}
elif [ "$use_external_menu" = "rofi" ];then
	"${__distro_path_root}/bin/not_add_2_path"/check_4_dependencies_if_installed sed grep rofi $player_function || exit 1
	multi_selection_flag="-multi-select"
	launcher() {
		rofi "$1" -sort -dmenu -i -width 1500 -p "$2" "$3"
	}
fi

if command -v curl >/dev/null 2>&1;then
	perform_url_(){
    	case "$1" in
    		"m3u8_stream_list")
    			curl -e "$m3u8_refr" -s "$extract_link" -A "$agent"
    			;;
        	"get_embed_link")
        		shift 1
            	curl -e "$allanime_refr" -s "https://${allanime_base}$*" -A "$agent"
            	;;
        	"get_episode_embed")
            	curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"showId\":\"$id\",\"translationType\":\"$mode\",\"episodeString\":\"$ep_no\"}" --data-urlencode "query=$episode_embed_gql" -A "$agent"
            	;;
        	"search_show")
            	curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"search\":{\"allowAdult\":false,\"allowUnknown\":false,\"query\":\"$2\"},\"limit\":40,\"page\":1,\"translationType\":\"$mode\",\"countryOrigin\":\"ALL\"}" --data-urlencode "query=$search_gql" -A "$agent"
            	;;
        	"get_episode_list")
        		shift 1
            	curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"showId\":\"$*\"}" --data-urlencode "query=$episodes_list_gql" -A "$agent"
            	;;
        	*)
            	echo "Invalid action specified."
            	return 1
            	;;
    	esac
    }
elif command -v wget >/dev/null 2>&1;then
	perform_url_() {
		case "$1" in
			"m3u8_stream_list")
    			wget -qO- --referer="$m3u8_refr" --user-agent="$agent" "$extract_link"
    			;;
			"get_embed_link")
				shift 1
				wget -qO- --referer="$allanime_refr" --user-agent="$agent" "https://${allanime_base}$*"
			;;
			"get_episode_embed")
				wget -qO- --referer="$allanime_refr" --user-agent="$agent" --method=GET --header="Content-Type: application/x-www-form-urlencoded" \
					--body-data="variables={\"showId\":\"$id\",\"translationType\":\"$mode\",\"episodeString\":\"$ep_no\"}" \
					--body-data="query=$episode_embed_gql" "${allanime_api}/api"
			;;
			"search_show")
				wget -qO- --referer="$allanime_refr" --user-agent="$agent" --method=GET --header="Content-Type: application/x-www-form-urlencoded" \
					--body-data="variables={\"search\":{\"allowAdult\":false,\"allowUnknown\":false,\"query\":\"$2\"},\"limit\":40,\"page\":1,\"translationType\":\"$mode\",\"countryOrigin\":\"ALL\"}" \
					--body-data="query=$search_gql" "${allanime_api}/api"
			;;
			"get_episode_list")
				shift 1
				wget -qO- --referer="$allanime_refr" --user-agent="$agent" --method=GET --header="Content-Type: application/x-www-form-urlencoded" \
					--body-data="variables={\"showId\":\"$*\"}" --body-data="query=$episodes_list_gql" "${allanime_api}/api"
			;;
			*)
				echo "Invalid action specified."
				return 1
			;;
		esac
	}	
fi

nth() {
    stdin=$(cat -)
    [ -z "$stdin" ] && return 1 || :
    line_count="$(printf "%s\n" "$stdin" | wc -l | tr -d "[:space:]")"
    if [ "$line_count" -eq 1 ];then
        printf "%s" "$stdin" | cut -f2,3 && return 0
    fi
    prompt="$1"
    multi_flag=""
    if [ $# -ne 1 ];then
        shift && multi_flag="$1"
    fi
    line=$(printf "%s" "$stdin" | cut -f1,3 | tr '\t' ' ' | launcher "$multi_flag" "$prompt" | cut -d " " -f 1)
    line_start=$(printf "%s" "$line" | head -n1)
    line_end=$(printf "%s" "$line" | tail -n1)
    if [ -z "$line" ];then
        exit 1
    fi
    if [ "$line_start" = "$line_end" ]; then
        printf "%s" "$stdin" | grep -E '^'"${line}"'($|[[:space:]])' | cut -f2,3 || exit 1
    else
        printf "%s" "$stdin" | sed -n '/^'"${line_start}"'$/,/^'"${line_end}$"'/p' || exit 1
    fi
}

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

# SCRAPING
# extract the video links from response of embed urls, extract mp4 links form m3u8 lists
get_links() {
    response="$(perform_url_ get_embed_link "$*")"
    episode_link="$(printf '%s' "$response" | sed 's|},{|\
|g' | sed -nE 's|.*link":"([^"]*)".*"resolutionStr":"([^"]*)".*|\2 >\1|p;s|.*hls","url":"([^"]*)".*"hardsub_lang":"en-US".*|\1|p')"

    case "$episode_link" in
        *repackager.wixmp.com*)
            extract_link=$(printf "%s" "$episode_link" | cut -d'>' -f2 | sed 's|repackager.wixmp.com/||g;s|\.urlset.*||g')
            for j in $(printf "%s" "$episode_link" | sed -nE 's|.*/,([^/]*),/mp4.*|\1|p' | sed 's|,|\
|g'); do
                printf "%s >%s\n" "$j" "$extract_link" | sed "s|,[^/]*|${j}|g"
            done | sort -nr
            ;;
        *master.m3u8*)
            m3u8_refr=$(printf '%s' "$response" | sed -nE 's|.*Referer":"([^"]*)".*|\1|p') && printf '%s\n' "m3u8_refr >$m3u8_refr" >"$cache_dir/m3u8_refr"
            extract_link=$(printf "%s" "$episode_link" | head -1 | cut -d'>' -f2)
            relative_link=$(printf "%s" "$extract_link" | sed 's|[^/]*$||')
            m3u8_streams="$(perform_url_ m3u8_stream_list)"
            printf "%s" "$m3u8_streams" | grep -q "EXTM3U" && printf "%s" "$m3u8_streams" | sed 's|^#EXT-X-STREAM.*x||g; s|,.*|p|g; /^#/d; $!N; s|\
| >|;/EXT-X-I-FRAME/d' | sed "s|>|cc>${relative_link}|g" | sort -nr
            printf '%s' "$response" | sed -nE 's|.*"subtitles":\[\{"lang":"en","label":"English","default":"default","src":"([^"]*)".*|subtitle >\1|p' >"$cache_dir/suburl"
            ;;
        *) [ -n "$episode_link" ] && printf "%s\n" "$episode_link" || : ;;
    esac

    printf "%s" "$*" | grep -q "tools.fast4speed.rsvp" && printf "%s\n" "Yt >$*"
    printf "\033[1;32m%s\033[0m Links Fetched\n" "$provider_name" 1>&2
}

# initialises provider_name and provider_id. First argument is the provider name, 2nd is the regex that matches that provider's link
provider_init() {
    provider_name=$1
    provider_id=$(printf "%s" "$resp" | sed -n "$2" | head -1 | cut -d':' -f2 | sed 's/../&\
/g' | sed 's/^79$/A/g;s/^7a$/B/g;s/^7b$/C/g;s/^7c$/D/g;s/^7d$/E/g;s/^7e$/F/g;s/^7f$/G/g;s/^70$/H/g;s/^71$/I/g;s/^72$/J/g;s/^73$/K/g;s/^74$/L/g;s/^75$/M/g;s/^76$/N/g;s/^77$/O/g;s/^68$/P/g;s/^69$/Q/g;s/^6a$/R/g;s/^6b$/S/g;s/^6c$/T/g;s/^6d$/U/g;s/^6e$/V/g;s/^6f$/W/g;s/^60$/X/g;s/^61$/Y/g;s/^62$/Z/g;s/^59$/a/g;s/^5a$/b/g;s/^5b$/c/g;s/^5c$/d/g;s/^5d$/e/g;s/^5e$/f/g;s/^5f$/g/g;s/^50$/h/g;s/^51$/i/g;s/^52$/j/g;s/^53$/k/g;s/^54$/l/g;s/^55$/m/g;s/^56$/n/g;s/^57$/o/g;s/^48$/p/g;s/^49$/q/g;s/^4a$/r/g;s/^4b$/s/g;s/^4c$/t/g;s/^4d$/u/g;s/^4e$/v/g;s/^4f$/w/g;s/^40$/x/g;s/^41$/y/g;s/^42$/z/g;s/^08$/0/g;s/^09$/1/g;s/^0a$/2/g;s/^0b$/3/g;s/^0c$/4/g;s/^0d$/5/g;s/^0e$/6/g;s/^0f$/7/g;s/^00$/8/g;s/^01$/9/g;s/^15$/-/g;s/^16$/./g;s/^67$/_/g;s/^46$/~/g;s/^02$/:/g;s/^17$/\//g;s/^07$/?/g;s/^1b$/#/g;s/^63$/\[/g;s/^65$/\]/g;s/^78$/@/g;s/^19$/!/g;s/^1c$/$/g;s/^1e$/&/g;s/^10$/\(/g;s/^11$/\)/g;s/^12$/*/g;s/^13$/+/g;s/^14$/,/g;s/^03$/;/g;s/^05$/=/g;s/^1d$/%/g' | tr -d '\n' | sed "s/\/clock/\/clock\.json/")
}

# generates links based on given provider
generate_link() {
    case $1 in
        1) provider_init "wixmp" "/Default :/p" ;;    # wixmp(default)(m3u8)(multi) -> (mp4)(multi)
        2) provider_init "youtube" "/Yt-mp4 :/p" ;;   # youtube(mp4)(single)
        3) provider_init "sharepoint" "/S-mp4 :/p" ;; # sharepoint(mp4)(single)
        *) provider_init "hianime" "/Luf-Mp4 :/p" ;;  # hianime(m3u8)(multi)
    esac
    [ -n "$provider_id" ] && get_links "$provider_id"
}

select_quality() {
    # removing urls which have soft subs to avoid playing on android, iSH and vlc (m3u8 streams don't get correct referrer)
    printf '%s' "$player_function" | cut -f1 -d" " | grep -qE '(android|iSH|vlc)' && links=$(printf '%s' "$links" | sed '/cc>/d;/subtitle >/d;/m3u8_refr >/d')
    printf '%s' "$player_function" | cut -f1 -d" " | grep -qE '(android|iSH)' && links=$(printf '%s' "$links" | sed '/Yt >/d')
    case "$1" in
        best) result=$(printf "%s" "$links" | head -n1) ;;
        worst) result=$(printf "%s" "$links" | grep -E '^[0-9]{3,4}' | tail -n1) ;;
        *) result=$(printf "%s" "$links" | grep -m 1 "$1") ;;
    esac
    if [ -z "$result" ];then
        printf "Specified quality not found, defaulting to best\n" 1>&2 && result=$(printf "%s" "$links" | head -n1)
    fi

    # add refr,sub flags for m3u8 and refr flag for yt
    printf '%s' "$result" | grep -q "cc>" && subtitle="$(printf '%s' "$links" | sed -nE 's|subtitle >(.*)|\1|p')"
    if [ -n "$subtitle" ];then
        subs_flag="--sub-file=$subtitle"
    fi
    printf '%s' "$result" | grep -q "cc>" && m3u8_refr="$(printf '%s' "$links" | sed -nE 's|m3u8_refr >(.*)|\1|p')" && refr_flag="--referrer=$m3u8_refr"
    printf "%s" "$result" | grep -q "tools.fast4speed.rsvp" && refr_flag="--referrer=$allanime_refr"

    ! (printf '%s' "$result" | grep -qE "(cc>|tools.fast4speed.rsvp)") && unset refr_flag || :
    ! (printf '%s' "$result" | grep -q "cc>") && unset subs_flag || :
    episode=$(printf "%s" "$result" | cut -d'>' -f2)
}

# gets embed urls, collects direct links into provider files, selects one with desired quality into $episode
get_episode_url() {
    # get the embed urls of the selected episode
    #shellcheck disable=SC2016
    episode_embed_gql='query ($showId: String!, $translationType: VaildTranslationTypeEnumType!, $episodeString: String!) { episode( showId: $showId translationType: $translationType episodeString: $episodeString ) { episodeString sourceUrls }}'

    resp=$(perform_url_ get_episode_embed | tr '{}' '\n' | sed 's|\\u002F|\/|g;s|\\||g' | sed -nE 's|.*sourceUrl":"--([^"]*)".*sourceName":"([^"]*)".*|\2 :\1|p')
    # generate links into sequential files
    cache_dir="$(mktemp -d)"
    providers="1 2 3 4"
    for provider in $providers; do
        generate_link "$provider" >"$cache_dir"/"$provider" &
    done
    wait
    # select the link with matching quality
    links=$(cat "$cache_dir"/* | sort -g -r -s)
    rm -r "$cache_dir"
    select_quality "$quality"
    if printf "%s" "$ep_list" | grep -q "^$ep_no$"; then
        [ -z "$episode" ] && die "Episode is released, but no valid sources!" || :
    else
        [ -z "$episode" ] && die "Episode not released!" || :
    fi
}

# search the query and give results
search_anime() {
    #shellcheck disable=SC2016
    search_gql='query( $search: SearchInput $limit: Int $page: Int $translationType: VaildTranslationTypeEnumType $countryOrigin: VaildCountryOriginEnumType ) { shows( search: $search limit: $limit page: $page translationType: $translationType countryOrigin: $countryOrigin ) { edges { _id name availableEpisodes __typename } }}'

    perform_url_ search_show "$1" | sed 's|Show|\
| g' | sed -nE "s|.*_id\":\"([^\"]*)\",\"name\":\"(.+)\",.*${mode}\":([1-9][^,]*).*|\1	\2 (\3 episodes)|p" | sed 's/\\"//g'
}

# get the episodes list of the selected anime
episodes_list() {
    #shellcheck disable=SC2016
    episodes_list_gql='query ($showId: String!) { show( _id: $showId ) { _id availableEpisodesDetail }}'

    perform_url_ get_episode_list "$*" | sed -nE "s|.*$mode\":\[([0-9.\",]*)\].*|\1|p" | sed 's|,|\
|g; s|"||g' | sort -n -k 1
}

# PLAYING

process_hist_entry() {
    ep_list=$(episodes_list "$id")
    latest_ep=$(printf "%s\n" "$ep_list" | tail -n1)
    title=$(printf "%s\n" "$title" | sed "s|[0-9]\+ episodes|${latest_ep} episodes|")
    ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{n;p;}") 2>/dev/null
    [ -n "$ep_no" ] && printf "%s\t%s - episode %s\n" "$id" "$title" "$ep_no" || :
}

update_history() {
    if grep -q -- "$id" "$histfile"; then
        sed -E "s|^[^	]+	${id}	[^	]+$|${ep_no}	${id}	${title}|" "$histfile" >"${histfile}.new"
    else
        cp "$histfile" "${histfile}.new"
        printf "%s\t%s\t%s\n" "$ep_no" "$id" "$title" >>"${histfile}.new"
    fi
    mv "${histfile}.new" "$histfile"
}

play_episode() {
    if [ "$log_episode" = 1 ];then
        command -v logger >/dev/null && logger -t ani-cli "${allanime_title}${ep_no}"
    fi
    if [ "$skip_intro" = 1 ];then
        skip_flag="$(ani-skip -q "$mal_id" -e "$ep_no")"
    fi
    if [ -z "$episode" ];then
        get_episode_url
    fi
    # shellcheck disable=SC2086
    case "$player_function" in
        mpv*)
            if [ "$no_detach" = 0 ]; then
                nohup $player_function $skip_flag --force-media-title="${allanime_title}Episode ${ep_no}" "$episode" $subs_flag $refr_flag >/dev/null 2>&1 &
            else
                $player_function $skip_flag $subs_flag $refr_flag --force-media-title="${allanime_title}Episode ${ep_no}" "$episode"
            fi
            ;;
        vlc*) nohup $player_function --http-referrer="${allanime_refr}" --play-and-exit --meta-title="${allanime_title}Episode ${ep_no}" "$episode" >/dev/null 2>&1 & ;;
        *) nohup $player_function "$episode" >/dev/null 2>&1 & ;;
    esac
    replay="$episode"
    unset episode
    update_history
    if [ "$use_external_menu" = "rofi" ];then
        wait
    fi
}

play() {
    start=$(printf "%s" "$ep_no" | grep -Eo '^(-1|[0-9]+(\.[0-9]+)?)')
    end=$(printf "%s" "$ep_no" | grep -Eo '(-1|[0-9]+(\.[0-9]+)?)$')
    if [ "$start" = "-1" ];then
        ep_no=$(printf "%s" "$ep_list" | tail -n1) && unset start
    fi
    if [ -z "$end" ] || [ "$end" = "$start" ];then
        unset start end
    fi
    if [ "$end" = "-1" ];then
        end=$(printf "%s" "$ep_list" | tail -n1)
    fi
    line_count=$(printf "%s\n" "$ep_no" | wc -l | tr -d "[:space:]")
    if [ "$line_count" != 1 ] || [ -n "$start" ]; then
        [ -z "$start" ] && start=$(printf "%s\n" "$ep_no" | head -n1) || :
        [ -z "$end" ] && end=$(printf "%s\n" "$ep_no" | tail -n1) || :
        range=$(printf "%s\n" "$ep_list" | sed -nE "/^${start}\$/,/^${end}\$/p")
        [ -z "$range" ] && die "Invalid range!" || :
        for i in $range; do
            tput clear
            ep_no=$i
            printf "\33[2K\r\033[1;34mPlaying episode %s...\033[0m\n" "$ep_no"
            if [ "$i" = "$end" ];then
                unset range
            fi
            play_episode
        done
    else
        play_episode
    fi
    # moves up to stored position and deletes to end
    tput rc && tput ed
}

# MAIN
if [ "$1" = "--continue" ] || [ "$1" = "-c" ];then
	search=history
	shift 1
fi

query="$(printf "%s" "$query $1" | sed "s|^ ||;s| |+|g")"

[ "$external_menu_normal_window" = "1" ] && external_menu_args="-normal-window" || :

# searching
case "$search" in
    history)
        anime_list=$(while read -r ep_no id title; do process_hist_entry & done <"$histfile")
        wait
        [ -z "$anime_list" ] && die "No unwatched series in history!" || :
        [ -z "${index##*[!0-9]*}" ] && id=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: " | cut -f1) || :
        [ -n "${index##*[!0-9]*}" ] && id=$(printf "%s" "$anime_list" | sed -n "${index}p" | cut -f1) || :
        if [ -z "$id" ];then
            exit 1
        fi
        title=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed 's/ - episode.*//')
        ep_list=$(episodes_list "$id")
        ep_no=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed -nE 's/.*- episode (.+)$/\1/p')
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        ;;
    *)
        if [ "$use_external_menu" = "fzf" ]; then
            while [ -z "$query" ]; do
                printf "\33[2K\r\033[1;36mSearch anime: \033[0m" && read -r query
            done
        else
            [ -z "$query" ] && query=$(printf "" | launcher "" "Search anime: " "$external_menu_args") || :
            [ -z "$query" ] && exit 1 || :
        fi

        query=$(printf "%s" "$query" | sed "s| |+|g")
        anime_list=$(search_anime "$query")
        if [ -z "$anime_list" ];then
            die "No results found!"
        fi
        if [ -n "$index" ] && [ "$index" -eq "$index" ];then
            result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        fi
        if [ -z "$index" ];then
            result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
            [ -z "$result" ] && exit 1 || :
        fi
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        ep_list=$(episodes_list "$id")
        if [ -z "$ep_no" ];then
            ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag")
            [ -z "$ep_no" ] && exit 1 || :
        fi
        ;;
esac
if [ "$skip_intro" = 1 ];then
    mal_id="$(ani-skip -q "${skip_title:-${title}}")"
fi

# moves the cursor up one line and clears that line
tput cuu1 && tput el
# stores the position of cursor
tput sc

# playback & loop
play

while cmd=$(printf "next\nreplay\nprevious\nselect\nchange_quality\nquit" | nth "Playing episode $ep_no of $title... "); do
    case "$cmd" in
        next) ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{n;p;}") 2>/dev/null ;;
        replay) episode="$replay" ;;
        previous) ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{g;1!p;};h") 2>/dev/null ;;
        select) ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag") ;;
        change_quality)
            new_quality="$(printf "%s" "$links" | launcher | cut -d\> -f1)"
            select_quality "$new_quality"
            ;;
        *) exit 0 ;;
    esac
    [ -z "$ep_no" ] && die "Out of range" || :
    play
done

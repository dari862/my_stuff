#!/bin/sh
set -eu

check_4_dependencies_if_installed nmcli sed || exit 1

show_error() {
  red="\033[0;91m"
  nc="\033[0m"
  printf "${red}${1}${nc}" 1>&2
}

show_info() {
  green="\033[0;92m"
  nc="\033[0m"
  printf "${green}${1}${nc}"
} 

show_warning() {
  yellow="\033[0;93m"
  nc="\033[0m"
  printf "${yellow}${1}${nc}"
}

# Script requires nm-cli, so check that the Network Manager service is running.
if ! service_manager is-active NetworkManager;then
  show_info "Enabling Network Manager systemd service."
  service_manager enable NetworkManager
fi

check_wg_config() {
  in="$1"
  name="${in%.*}"  # Strip the extension (assumes '.' is the separator)
  name=$(basename "$in")  # Ensure we're using just the base file name without path

  ipv4addr=$(sed -n "s/^Address = \([^,]*\).*/\1/p" "$in")
  ipv6addr=$(sed -n "s/^Address = [^,]*,\([^ ]*\).*/\1/p" "$in")

  found=false

  # Pipe the output of nmcli directly into the while loop
  nmcli conn show | sed -n "s/^\([A-Za-z0-9()\ -]\+\)\s\+[a-f0-9-]\+\s\+wireguard\s\+.*/\1/p" | \
  while IFS= read -r conn; do
    [ -z "$conn" ] && continue  # Skip empty lines

    conn_data=$(nmcli conn show "$conn")
    
    # Check if the connection matches our required conditions
    if echo "$conn_data" | grep -q "ipv6.addresses.*$ipv6addr" && \
       echo "$conn_data" | grep -q "ipv4.addresses.*$ipv4addr" && \
       echo "$conn_data" | grep -q "connection.interface-name.*$name";then
      found=true
      break
    fi
  done

  if [ "$found" = true ];then
    show_warning "WARNING: matching configuration for ${in@Q} already exists." >&2
    return 1  # Return non-zero to indicate the config already exists
  else
    return 0  # Return 0 for success, i.e., no matching config found
  fi
}

import_wg_config() {
  in="${1}"
  name="${in%.*}"
  name="$(basename "${name}")"
  nmcli conn import type wireguard file "${in}"
  nmcli conn down "${name}"
  nmcli conn modify "${name}" connection.autoconnect no
}

rename_wg_iface() {
  in="${1}"
  oldname="${in%.*}"
  oldname="$(basename "${oldname}")"
  newname="${2}"
  id="${1##*[-_]}"
  id="${id%.*}"

  case "${newname}" in
    *"${id}"*)
      nmcli conn modify "${oldname}" connection.id "${newname}"
      ;;
    *)
      nmcli conn modify "${oldname}" connection.id "${newname} (${id})"
      ;;
  esac
}

print_usage() {
  show_info "Usage: nm-wg-import -i <config file> -n <wg connection name>"
}

#
# Main
#

OPTIONS=hi:n:
LONGOPTIONS=help,input:,name:
PARSED=$(getopt -o "${OPTIONS}" --long "${LONGOPTIONS}" -n "${0}" -- "${@}")
eval set -- "${PARSED}"

while [ $# -ge 1 ]; do
  case "${1}" in
    -i | --input)
      INPUT="${2}"
      shift 2
      ;;
    -n | --name)
      NAME="${2}"
      shift 2
      ;;
    -h | --help)
      print_usage
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      show_error "ERROR: unknown flag ${1@Q}. Exiting."
      exit 3
      ;;
  esac
done

# Check if the INPUT variable is set
if [ -z "$INPUT" ];then
  show_error "ERROR: no input given. Exiting."
  exit 3
fi

# Check if the file exists
if [ ! -f "$INPUT" ];then
  show_error "ERROR: input ${INPUT@Q} does not exist. Exiting."
  exit 3
fi

# Check and import the WireGuard config
if check_wg_config "$INPUT";then
  import_wg_config "$INPUT"
  if [ -n "$NAME" ];then
    rename_wg_iface "$INPUT" "$NAME"
  fi
fi

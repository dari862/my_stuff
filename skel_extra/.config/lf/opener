# Opener for lf

# In general, you should delegate opening files to your opener.
# resources (e.g. xdg-open, mimeo), I recommend putting it in the variable
# $OPENER environment and then configure your type association rules
# MIME and .desktop launchers (e.g. ~/.config/applications/mimeapps.list)
# However, more advanced behavior can be programmed here based on
# in more file characteristics and/or specifically for lf
# Official IANA MIME types: https://www.iana.org/assignments/media-types/media-types.xhtml
OPENER="${OPENER:-xdg-open}"
MPV="${MPV:-mpv}"
TERMINAL="${TERMINAL:-kitty}"

AUDIO_PLAYER="${AUDIO_PLAYER:-"${MPV}"}"
VIDEO_PLAYER="${VIDEO_PLAYER:-"${MPV}"}"

cmd open ${{

	# Command demonizer, in order of preference
	dem() {
		{ setsid -f "$@" >/dev/null 2>&1& } \
			|| ({ nohup "$@" >/dev/null 2>&1& } &) \
			|| (exec "$@" >/dev/null 2>&1&)
	}

	real_f="$(readlink -f $f || realpath $f)"

	mime_type="$(exiftool -s3 -MIMEType "$real_f" 2>/dev/null || file --dereference -b --mime-type -- "$real_f" 2>/dev/null)"

	case "$mime_type" in
	(application/pdf | application/postscript | image/vnd.djvu |  application/epub*)
		dem my-pdf-reader "$fx"
	;;
	(text/html)
		case "${f##*.}" in
		(xls) dem localc $f ;;
		(*) my-ide "$fx"
		esac
	;;
	(text/troff)
		case "${f##*.}" in
		([0-9] | [01]p | [23]*) man "$fx" ;;
		(*) my-ide "$fx"
		esac
	;;
	( text/* | application/json | application/javascript | \
	application/pgp-encrypted | inode/x-empty | application/octet-stream | \
	application/x-gettext-translation )
		my-ide "$fx"
	;;
	(image/x-*)
		dem my-image-editor "$fx"
	;;
	(image/* )
		case "$(tty)" in
		("/dev/tty"*) # En tty imágenes pueden ser mostradas con mpv
			"${MPV}" --keep-open "$fx"
		;;
		(*) dem my-image-viewer "$fx"
		esac
	;;
	(audio/*)
		case "$(tty)" in
		("/dev/tty"*) # No demonizar en tty
			"${AUDIO_PLAYER}" --audio-display=no "$fx"
		;;
		(*) dem "${TERMINAL}" -e "${AUDIO_PLAYER}" --audio-display=no "$fx"
		esac
	;;
	(video/*)
		case "$(tty)" in
		("/dev/tty"*) # No demonizar en tty
			"${VIDEO_PLAYER}" "$fx"
		;;
		# TODO: handle video/webm like previewer
		(*) dem "${VIDEO_PLAYER}" "$fx"
		esac
	;;
	(application/vnd.sqlite3)
		sqlite3 "$fx"
	;;
#		text/xml)
#			;;
	(application/zip)
		case "${f##*.}" in
		(kra) dem krita $f ;;
		(*)
			for f in "$fx"; do
				"${OPENER}" $f
			done
		esac
	;;
	(*)
		case "$f" in
		# TODO: redo this with mime types, not extensions
		( *.tar.bz | *.tar.bz2 | *.tbz | \
		*.tbz2 | *.tar.gz | *.tgz | *.tar.lzma | \
		*.tar.xz | *.txz | *.zip | *.rar | *.iso)
			mntdir="$f-archivemount"
			if ! [ -d "$mntdir" ];then
				mkdir -- "$mntdir"
				archivemount "$f" "$mntdir"
				printf -- "%s\n" "$mntdir" >> "/tmp/$USER/__lf_archivemount_$id"
			fi
			lf -remote "send $id cd '$mntdir'"
			lf -remote "send $id reload"
		;;
		esac

		# Delegate opening to resource opener

		#pwhich() {
		#	hash "$1" >/dev/null 2>&1 && command -v -- "$1"
		#}
		#[ "$OPENER" ] || OPENER=$(pwhich xdg-open)
		for f in "$fx"; do
			dem "${OPENER}" $f
			#"${OPENER:-my-ide}" $f
			# ${OPENER:-"xdg-open"} $f || "${EDITOR:-"nvim"}" $f
		done
		;;
	esac
}}

 # Bug: In my AwesomeWM some JPGs or webm don't show the window until is tiled

cmd openwith ${{

	dem() {
		{ setsid -f "$@" >/dev/null 2>&1& } \
			|| ({ nohup "$@" >/dev/null 2>&1& } &) \
			|| (exec "$@" >/dev/null 2>&1&)
	}

	real_f="$(readlink -f $f || realpath $f)"
	mime_type="$(exiftool -s3 -MIMEType "$real_f" || file --dereference -b --mime-type -- "$real_f")"

	menu_select() {
		nl -nln | fzf --with-nth 2.. | cut -d' ' -f1
	}

	# TODO: hacer que se puedan abrir con múltiples a la vez (fzf +m)
	case "$mime_type" in
	( text/* | application/json | application/javascript | \
	application/pgp-encrypted | inode/x-empty | application/octet-stream )
		app=$(menu_select <<-\EOF
		$EDITOR
		$EDITOR (new terminal)
		nano
		nano (new terminal)
		EOF
		)
		case "$app" in
		(1) my-ide "$fx" ;;
		(2) dem popup_terminal --editor "$fx" ;;
		(3) nano "$fx" ;;
		(4) dem popup_terminal nano "$fx" ;;
		esac
	;;

	(image/svg+xml | image/png | image/jpeg | image/gif )
		app=$(menu_select <<-\EOF
		vimiv
		gimp
		mpv
		krita
		inkscape
		EOF
		)
		case "$app" in
		(1) dem vimiv "$fx" ;;
		(2) dem gimp "$fx" ;;
		(3)
			case "$(tty)" in
			# Demonizing on tty makes it impossible to quit
			("/dev/tty"*) "${MPV}" --keep-open=yes "$fx" ;;
			(*) dem "${MPV}" --keep-open=yes "$fx" ;;
			esac
		;;
		(4) dem krita "$fx" ;;
		(5) dem inkscape "$fx" ;;
		esac
	;;

	(image/x-*)
		app=$(menu_select <<-\EOF
		gimp
		vimiv
		mpv
		EOF
		)
		case "$app" in
		(1) dem gimp "$fx" ;;
		(2) dem vimiv "$fx" ;;
		(3)
			case "$(tty)" in
			# Demonizing on tty makes it impossible to quit
			("/dev/tty"*) "${MPV}" --keep-open=yes "$fx" ;;
			(*) dem "${MPV}" --keep-open=yes "$fx" ;;
			esac
			;;
		esac
	;;

	(audio/*)
		app=$(menu_select <<-\EOF
		mpv (force terminal)
		mpv (background)
		mpv (background, only audio)
		mpv (foreground)
		mpv (foreground, only audio)
		mpv (force window)
		EOF
		)
		case "$app" in
		(1) dem "${TERMINAL}" -e "$MPV" --audio-display=no "$fx" ;;
		(2) dem "${MPV}" "$fx" ;;
		(3) dem "${MPV}" --audio-display=no "$fx" ;;
		(4) "${MPV}" "$fx" ;;
		(5) echo; "${MPV}" --audio-display=no "$fx" ;;
		(6) dem "${MPV}" --force-window "$fx" ;;
		esac
	;;

	(video/*)
		app=$(menu_select <<-\EOF
		mpv
		mpv (background, only audio)
		mpv (foreground, only audio)
		kdenlive
		EOF
		)
		case "$app" in
		(1) dem "${MPV}" "$fx" ;;
		(2) dem "${MPV}" --video=no --audio-display=no "$fx" ;;
		(3) echo; "${MPV}" --video=no --audio-display=no "$fx" ;;
		(4) dem my-video-editor "$fx" ;;
		esac
	esac
}}

# vim: ft=lf

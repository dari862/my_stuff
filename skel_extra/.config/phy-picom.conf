##  Picom user configuration file (~/.config/picom.conf)
##  with reference to: /usr/share/doc/picom/examples/picom.sample.conf
##
##  Various people have contributed to this file,
##  so the meaning of "I" is not well defined.
##
##  In most cases 'man picom' has more information.
##  See also: https://wiki.archlinux.org/title/Picom
##
##	@include "picom-animations.conf"

#################################
#  Shadows						#
#################################
# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
# shadow = false
shadow = true;

# The blur radius for shadows, in pixels. (defaults to 12)
# shadow-radius = 12
shadow-radius = 7;

# The opacity of shadows. (0.0 - 1.0,  defaults to 0.75)
#shadow-opacity = 0.6

# The left offset for shadows, in pixels. (defaults to -15)
# shadow-offset-x = -15
shadow-offset-x = -7;

# The top offset for shadows, in pixels. (defaults to -15)
# shadow-offset-y = -15
shadow-offset-y = -7;

#  Set if you want different colour shadows

# Red color value of shadow (0.0 - 1.0, defaults to 0).
#shadow-red = 0

# Green color value of shadow (0.0 - 1.0, defaults to 0).
#shadow-green = 0

# Blue color value of shadow (0.0 - 1.0, defaults to 0).
#shadow-blue = 0

# Hex string color value of shadow (#000000 - #FFFFFF, defaults to #000000). This option will override options set shadow-(red/green/blue)
shadow-color = "#000000"

# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = ""

# Crop shadow of a window fully on a particular Xinerama screen to the screen.
# xinerama-shadow-crop = false

#################################
#           Fading              #
#################################
# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
# fading = false
fading = true;

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
# fade-in-step = 0.028
fade-in-step = 0.05;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
# fade-out-step = 0.03
fade-out-step = 0.05;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 5

#  Fade windows in/out when opening/closing
no-fading-openclose = false;

#  Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
no-fading-destroyed-argb = false;

#################################
#   Transparency / Opacity      #
#################################
# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
#inactive-opacity = 1

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
frame-opacity = 1.0;

# Default opacity for dropdown menus and popup menus. (0.0 - 1.0, defaults to 1.0)
# Option `menu-opacity` is deprecated, and will be removed.
# Please use the wintype option `opacity` of `popup_menu` and `dropdown_menu` instead.
# menu-opacity = 1.0;

# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
# inactive-opacity-override = true
#inactive-opacity-override = false;

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
#active-opacity = 1.0;

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
# inactive-dim = 0.2

# Use fixed inactive dim value, instead of adjusting according to window opacity.
#inactive-dim-fixed = 1.0

##############
# Background #
# Blurring   #
##############
# Parameters for background blurring, see the *BLUR* section for more information.
# blur-method = "none"
# blur-strength = 0
# blur-size = 12
#
# blur-deviation = false

# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
# The name of the switch may change without prior notifications.
#
# blur-background = false

# Blur background of windows when the window frame is not opaque.
# Implies:
#    blur-background
# Bad in performance, with driver-dependent behavior. The name may change.
#
# blur-background-frame = false

# Use fixed blur strength rather than adjusting according to window opacity.
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = false;

# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ''
blur-kern = "3x3box";

#################################
#       	corner		        #
#################################
corner-radius = 6

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
#
# detect-rounded-corners = false
detect-rounded-corners = true;

#################################
#       General Settings        #
#################################
######################
# "advanced" machine #
# specific options   #
######################

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# In a (((__distro_title))) sesssion, picom is forked anyway, so this setting is not needed.
# daemon = false

# Enable remote control via D-Bus. See the *D-BUS API* section in the manual for more details.
# The D-Bus methods and signals are not yet stable, thus undocumented right now.
# dbus = false

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
#
# detect-client-opacity = false
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it. (openbox should be OK)
#
use-ewmh-active-win = true;

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
# paint-on-overlay may make the flickering less obvious.
#
unredir-if-possible = true;

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
#
# detect-transient = false
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
# detect-transient is enabled, too.
#
# detect-client-leader = false
detect-client-leader = true;

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
# resize-damage = 1

# Specify a list of conditions of windows that should be painted with inverted color.
# Resource-hogging, and is not well tested.
#
# invert-color-include = []

# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn";

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr.
# Otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# When setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = '/path/to/your/log/file'

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = '/path/to/your/log/file'

#################################
#  Backend
#################################
# Use higher precision during rendering, and apply dither when presenting the
# rendered screen. Reduces banding artifacts, but may cause performance
# degradation. Only works with OpenGL.
dithered-present = false;

# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
#
#experimental-backends = true;

#  Backend to use: "xrender", "glx" or "xr_glx_hybrid". xrender is the default one.
#  GLX backend is typically much faster but depends on a sane driver.

backend = "xrender";

# Enable/disable VSync.
vsync = true;


###############
# GLX backend #
###############

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# This may not work with --blur-background. Tests show a 15% performance boost.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# "My tests show a 15% performance boost. Recommended."
#
# glx-no-stencil = true

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# "This option causes lockups in Virtualbox."
# Recommended if it works.
#
# glx-no-rebind-pixmap = true

# GLX backend: Use specified GLSL fragment shader for rendering window contents.
# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
# in the source tree for examples.
#
# glx-fshader-win = ''

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = true

###############

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
#
# xrender-sync-fence = false

# Specify refresh rate of the screen. If not specified or 0, picom will
# try detecting this with X RandR extension.
#
# refresh-rate = 60
#refresh-rate = 0

# Limit picom to repaint at most once every 1 / 'refresh_rate' second to
# boost performance. This should not be used with
#   vsync drm/opengl/opengl-oml
# as they essentially does sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#
# sw-opti =

#################################
#  rules
#################################
# Rule-based per-window options.
#
# See WINDOW RULES section in the man page for how these work.

blur:

	{
		method = "gaussian";
		size = 10;
		deviation = 2.5;
	}

rules: (

	{
		blur-background = false;
		fade = false;
	},

	{
		match = "window_type = 'normal'";
		fade = true;	#-fade-switch
		shadow = true;	#-shadow-switch
	},

	{
		match = "window_type = 'dialog'";
		shadow = true;	#-shadow-switch
	},

	{
		match = "window_type = 'tooltip'";
		corner-radius = 0;
		opacity = 0.90;
	},

	{
		match = "window_type = 'dock'";
		corner-radius = 0;
		fade = true;
	},

	{
		match = "window_type = 'dropdown_menu' || window_type = 'menu' || window_type = 'popup' || window_type = 'popup_menu'";
		corner-radius = 0;
	},

	{
		match = "window_type = 'dock'	|| window_type = 'desktop'";
		opacity = 1.0;	#-term-opacity-switch
		blur-background = false;	#-blur-switch
	},

	{
		match = "class_g = 'Bar'			|| "	# lemonbar
				"class_g = 'slop'			|| "	# maim
				"class_g = 'Plank'			|| "
				"class_g = 'FloaTerm'		|| "
				"class_g = 'XTerm'			|| "
				"class_g = 'URxvt'			|| "
				"class_g = 'kitty'			|| "
				"class_g = 'Alacritty'		|| "
				"class_g = 'Polybar'		|| "
				"class_g = 'code-oss'		|| "
				"class_g = 'Meld'			|| "
				"class_g = 'TelegramDesktop'|| "
				"class_g = 'Joplin'			|| "
				"class_g = 'firefox-esr'	|| "
				"class_g = 'firefox'";
		opacity = 1.0;
		blur-background = false;	#-blur-switch
	},
	
	{
		match = "class_g = 'scratch' || class_g = 'Updating'";
		opacity = 0.93;
		blur-background = false;	#-blur-switch
	},

	{
		match = "class_g = 'Polybar'	|| "
				"class_g = 'eww-bar'	|| "
				"class_g = 'Viewnior'	|| "
				"class_g = 'Rofi'		|| "
				"class_g = 'mpv'		|| "
				"class_g = 'scratch'	|| "
				"class_g = 'Dunst'		|| "
				"class_g = 'retroarch'";
		corner-radius = 0;
	},

	{
		match = "name = 'Notification'		|| "
				"! name~= ''         		|| "
				"name = 'tint2'   		    || "
    			"name = 'wbar'   		    || "
    			"name = 'Plank'   		    || "
    			"name = 'Docky'   		    || "
    			"name = 'Kupfer'   		    || "
    			"name *= 'VirtualBox'   	|| "
    			"name *= 'VLC'   		    || "
    			"name *= 'picom'   		    || "
    			"name *= 'Chromium'   		|| "
    			"name *= 'Chrome'   		|| "
				"class_g ?= 'Notify-osd'    || "
				"class_g ?= 'plank'         || "
    			"class_g ?= 'Conky'         || "
    			"class_g ?= 'Notify-osd'    || "
    			"class_g ?= 'Cairo-dock'    || "
    			"class_g ?= 'Xfce4-power-manager'    || "
    			"class_g ?= 'Xfce4-panel'   || "
				"class_g = 'Kupfer'         || "
    			"class_g = 'Synapse'        || "
				"class_g = 'Dunst'			|| "
				"class_g = 'Polybar'		|| "
				"class_g = 'jgmenu'			|| "
				"class_g = 'obmenu'			|| "
				"class_g = 'scratch'		|| "
				"class_g = 'Spotify'		|| "
				"class_g = 'retroarch'		|| "
				"class_g = 'firefox'		|| "
				"class_g = 'Rofi'			|| "
				"class_g = 'Screenkey'		|| "
				"class_g = 'mpv'			|| "
				"class_g = 'Viewnior'		|| "
				"_GTK_FRAME_EXTENTS@";
		shadow = false;
	},
	
	{
		match = "name = 'jgmenu' || name = 'obmenu' || name = 'slop'";
		fade = false;
	},
#################################
#  Animations
#################################
# Animations for NORMAL windows.
	{
		match = "window_type = 'normal'";
		animations = (
			{
				triggers = ["close", "hide"];
				opacity = {
					curve = "linear";
					duration = 0.1;
					start = "window-raw-opacity-before";
					end = 0;
				};
		blur-opacity = "opacity";
		shadow-opacity = "opacity";
			},
			{
				triggers = ["open", "show"];
				opacity = {
					curve = "cubic-bezier(0,1,1,1)";
					duration = 0.5;
					start = 0;
					end = "window-raw-opacity";
				};
		blur-opacity = "opacity";
		shadow-opacity = "opacity";
    offset-x = "(1 - scale-x) / 2 * window-width";
    offset-y = "(1 - scale-y) / 2 * window-height";
				scale-x = {
					curve = "cubic-bezier(0,1.3,1,1)";
					duration = 0.5;
					start = 0.6;
					end = 1;
				};
				scale-y = "scale-x";
		shadow-scale-x = "scale-x";
		shadow-scale-y = "scale-y";
		shadow-offset-x = "offset-x";
		shadow-offset-y = "offset-y";
			},
			{
				triggers = ["geometry"]
				scale-x = {
					curve = "cubic-bezier(0,0,0,1.28)";
					duration = 0.5;
					start = "window-width-before / window-width";
					end = 1;
				}
				scale-y = {
					curve = "cubic-bezier(0,0,0,1.28)";
					duration = 0.5;
					start = "window-height-before / window-height";
					end = 1;
				}
				offset-x = {
					curve = "cubic-bezier(0,0,0,1.28)";
					duration = 0.5;
					start = "window-x-before - window-x";
					end = 0;
				}
				offset-y = {
					curve = "cubic-bezier(0,0,0,1.28)";
					duration = 0.5;
					start = "window-y-before - window-y";
					end = 0;
				}
		shadow-scale-x = "scale-x";
		shadow-scale-y = "scale-y";
		shadow-offset-x = "offset-x";
		shadow-offset-y = "offset-y";
			}
		)
	},

# Animations for Rofi launchers.
	{
		match = "class_g = 'Rofi'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "disappear";
			duration = 0.05;
			scale = 0.5;
		},
		{
			triggers = ["open", "show"];
			preset = "appear";
			duration = 0.2;
			scale = 0.5;
		}
		)
	},

# Animations for Dunst notifications.
	{
		match = "class_g = 'Dunst'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "fly-out";	#-dunst-close-preset
			direction = "up";	#-dunst-close-direction
			duration = 0.2;
		},
		{
			triggers = ["open", "show"];
			preset = "fly-in";	#-dunst-open-preset
			direction = "up";	#-dunst-open-direction
			duration = 0.2;
		}
		)
	},

# Animations for Jgmenu.
	{
		match = "class_g = 'jgmenu'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "disappear";
			duration = 0.08;
			scale = 0.5;
		},
		{
			triggers = ["open", "show"];
			preset = "appear";
			duration = 0.15;
			scale = 0.5;
		}
		)
	},

# Animations for Openbox.	
	{
		match = "class_g = 'obmenu'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "disappear";
			duration = 0.08;
			scale = 0.5;
		},
		{
			triggers = ["open", "show"];
			preset = "appear";
			duration = 0.15;
			scale = 0.5;
		}
		)
	},

# Animations for Scratchpad.
	{
		match = "class_g = 'scratch'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "fly-out";
			direction = "up";
			duration = 0.2;
		},
		{
			triggers = ["open", "show"];
			preset = "fly-in";
			direction = "up";
			duration = 0.2;
		}
		)
	},

# Animations for Eww Profile card.
	{
		match = "name = 'Eww - launchermenu'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "slide-out";
			direction = "right";
			duration = 0.2;
		},
		{
			triggers = ["open", "show"];
			preset = "slide-in";
			direction = "right";
			duration = 0.2;
		}
		)
	},

# Animations for Eww Music player.
	{
		match = "name = 'Eww - music'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "slide-out";
			direction = "up";
			duration = 0.2;
		},
		{
			triggers = ["open", "show"];
			preset = "slide-in";
			direction = "up";
			duration = 0.2;
		}
		)
	},

# Animations for Eww calendar.
	{
		match = "name = 'Eww - date'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "fly-out";
			direction = "up";
			duration = 0.2;
		},
		{
			triggers = ["open", "show"];
			preset = "fly-in";
			direction = "up";
			duration = 0.2;
		}
		)
	},

# Animations for Eww Cheatsheet.
	{
		match = "name = 'Eww - csheet'";
		animations = (
		{
			triggers = ["close", "hide"];
			preset = "disappear";
			duration = 0.08;
			scale = 0.5;
		},
		{
			triggers = ["open", "show"];
			preset = "appear";
			duration = 0.15;
			scale = 0.5;
		}
		)
	}
################################# 
# end of animations
#################################
)


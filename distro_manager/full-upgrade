#!/bin/sh
# need superuser : var (__SUPER_USER)
# It runs full system upgrade in a text console
opt="${1:-}"

__SUPER_USER="my-superuser"

if [ "$opt" = "help" ] || [ "$opt" = "--help" ] || [ "$opt" = "-h" ];then
	echo ""
	echo "runs full system and distro upgrade."
	echo ""
	exit 0
fi

. "$__distro_path_lib"
. "${__distro_path_root}/lib/common/common"
. "${__distro_path_root}/Distro_Specific/Package-manager.sh"

getURL_path="$(which getURL)"

update_full_upgrade_script(){
	print_purple "==> check if full upgrade need update. "
	do_full_upgrade_need_update=false
	$__SUPER_USER mkdir -p /tmp/root/disto_updater
	$__SUPER_USER $getURL_path 'download2' "https://raw.githubusercontent.com/dari862/${__custom_distro_name}/refs/heads/main/distro_manager/full-upgrade" "/tmp/root/disto_updater/full-upgrade"
	$__SUPER_USER chmod +x "/tmp/root/disto_updater/full-upgrade"
	[ -n "$(diff "/tmp/root/disto_updater/full-upgrade" "${__distro_path_root}/distro_manager/full-upgrade")" ] && do_full_upgrade_need_update=true
	
	if [ "${do_full_upgrade_need_update}" = true ];then
		print_purple "==> running new version of full-upgrade. "
		/tmp/root/disto_updater/full-upgrade --skip-internet-check && exit || ( print_RED "failed to do full upgrade" && exit 1 )
	else
		print_GREEN "==> full upgrade up to date."
	fi
}

print_RED() {
	_msg_="${1-}"
	printf "\n\033[0;31m${_msg_}\033[0m\n"
	exit 1
}
print_GREEN() {
	_msg_="${1-}"
	printf "\n\033[0;32m${_msg_}\033[0m\n"
}
print_purple() {
	_msg_="${1-}"
	printf "\n\033[1;35m${_msg_}\033[0m\n"
}

__upgrade_current_repo_(){
	  print_purple "==> status"
	  __git_status="$($__SUPER_USER git status 2>&1 | grep 'fatal: unknown index entry format' || :)"
	  if [ -n "$__git_status" ];then
	  	$__SUPER_USER rm -f .git/index
	  	$__SUPER_USER git status || :
	  fi
      print_purple "==> Fetching"
      $__SUPER_USER git fetch  || print_RED "git fetch failed... "
      
      print_purple "==> Stash (dont apply local changes)."
      $__SUPER_USER git stash  || print_RED "git stash failed... "
      
      print_purple "==> Pulling"
      $__SUPER_USER git pull  || print_RED "git pull failed... "
}

update_packages(){
	cd "$__distro_path_updater"
	updaters_list="$(ls)"
	first_updater_file="$(echo "$updaters_list" | head -n 1)"
	if [ -f "${updaters_list}" ];then
		for updater in "${updaters_list}";do
			print_purple "==> runing $updater updater."
			./$updater
		done
	fi
}

Updating_Distro(){
	print_purple "==> checking Distro for update."
	cd "${__distro_path_root}"
	
	blob_modified=false
	skel_modified=false
	print_purple "==> Fetching Distro repo."
	$__SUPER_USER git remote set-url origin "https://github.com/dari862/${__custom_distro_name}.git" >/dev/null 2>&1
	$__SUPER_USER git fetch >/dev/null 2>&1
	if $(git status | grep -q "^Your branch is up to date" || :);then
		print_GREEN "==> Distro is up to date." 
	else
		print_purple "==> Updating Distro."
		
		if ! $__SUPER_USER git diff --quiet HEAD -- blob/ blob_extra/; then
  			blob_modified=true
		fi
		
		if ! $__SUPER_USER git diff --quiet HEAD -- skel/ skel_extra/; then
  			skel_modified=true
		fi
		
		if __upgrade_current_repo_;then
			for d in /home/*; do
				[ "$(dirname "$d")" = "/home" ] && ! id "$(basename "$d")" >/dev/null 2>&1 && continue	# Skip dirs that no are homes
    			f="${d}/${usr_flag_setup_path}"
    			[ ! -f "$f" ] && continue
    			if [ "$skel_modified" = true ];then
					$__SUPER_USER rm -f "${f}"
				fi
    			if [ "$blob_modified" = true ];then
					user_and_group=$(stat "$(dirname "$d/.config")" -c %u:%g)
					if [ -d "$d/.config/blob" ];then
						$__SUPER_USER cp -r "${__distro_path_root}/system_files/blob"/* "$d/.config/blob"
					else
						$__SUPER_USER cp -r "${__distro_path_root}/system_files/blob" "$d/.config"
					fi
					$__SUPER_USER chown -R "$user_and_group" "$d"
				fi
			done
		else
			print_RED "Updating Distro Failed... "
		fi

		print_GREEN "==> Distro is up to date." 
	fi
}

Updating_opt(){
	cd "${__distro_path_root}/opt/git/"
	__git_dir_to_update_="$(ls)"
	first__git_dir_to_update_file="$(echo "$__git_dir_to_update_" | head -n 1)"
	if [ -d "${first__git_dir_to_update_file}" ];then
		for __repo_ in "${__git_dir_to_update_}";do
			print_purple "==> ${__repo_} repository."
			cd "${__repo_}"
			__upgrade_current_repo_
			cd ..
			print_GREEN "==> ${__repo_} repository updated."
		done
	fi
}

post_updating(){
	print_purple "==> running system_files_creater."
	${__distro_path_root}/distro_manager/system_files_creater
}

##########################################################################################################################3

if [ "${opt}" != "--skip-internet-check" ];then
	connectiontest
	update_full_upgrade_script
fi

print_purple "==> sync package repositories"
Package_update_
print_GREEN "==> sync completed"

print_purple "==> full system upgrade"
full_upgrade_
print_GREEN "==> full system upgraded"

print_purple "==> clean package repository and remove orphan packages"
Package_remove_ || :
print_GREEN "==> orphan packages removed "

if [ -d "$__distro_path_updater" ];then
	print_purple "==> updating packages(s)."
	update_packages
	print_GREEN "==> updating packages(s) completed. "
fi

if command -v yt-dlp >/dev/null 2>&1;then
	$__SUPER_USER yt-dlp -U
fi

Updating_Distro

if [ -d "${__distro_path_root}/opt/git" ];then
	print_purple "==> updating git repository(s)."
	Updating_opt
	print_GREEN "==> fully git repository(s) updated."
fi

if command -v flatpak >/dev/null 2>&1;then
	print_purple "==> updating flatpak(s)."
	flatpak update -y
	print_GREEN "==> fully flatpak(s) updated."
fi

print_purple "==> post updating."
post_updating
print_GREEN "==> post updating completed ."

print_GREEN "==> Done"
exit 0

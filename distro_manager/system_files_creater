#!/bin/sh
# need superuser : my-superuser
set -e
if [ "$(id -u)" -ne 0 ]; then
    my-superuser $0 "$__distro_path_lib"
    exit
fi
__distro_path_lib="${1:-$__distro_path_lib}"
. "$__distro_path_lib"
. "${__distro_path_root}/lib/common/WM"
. "${__distro_path_root}/lib/common/common"
. "${__distro_path_root}/lib/common/my_installer_and_DB_dir"

if [ ! -f "${__distro_path_neverremove}/machine_type" ];then
	. "${__distro_path_root}/lib/common/machine_type"
	machine_type_are="$(check_machine_type)"
	printf '%s' "$machine_type_are" | tee "${__distro_path_neverremove}/machine_type" >/dev/null 2>&1
else
	machine_type_are="$(cat "${__distro_path_neverremove}/machine_type")"
fi

__distro_path_system_skel_files="${__distro_path_system_files}/skel"
__distro_path_system_blob_files="${__distro_path_system_files}/blob"
pipemenu_creater="${__distro_path_root}/bin/X11/pipemenu/create_pipemenu"

PATH="${__distro_path_root}/bin/cli:$PATH"
##################################################################################

show_m(){
	message="${1-}"
	printf '%b' "\n==[ \\033[1;32m${message}\\033[0m ]==\n"
}

show_wm(){
	message="${1-}"
	printf '%b' "\\033[1;33m[!] \\033[0m${message}\n"
}

show_em(){
	message="${1-}"
	printf '%b' "\\033[1;31m[-] ${message}\\033[0m\n"
	exit 1 # show_em
}

show_im(){
	message="${1-}"
	printf '%b' "\\033[1;34m[*] \\033[0m${message}\n"
}

copy_X11_blob_files(){
	panel_name="${1:-}"
	if command_exist openbox;then
		for theme in *;do
			cp -r "${theme}/openboxrctheme" "${__distro_path_system_blob_files}/${panel_name}/${theme}" 
		done
	fi
	for app in dunst openbox rofi;do
		show_im "copy $app blob and blob_extra to system_files/blob ."
		if command_exist $app;then
			for theme in *;do
				cp -r "${theme}/config/${app}" "${__distro_path_system_blob_files}/${panel_name}/${theme}/config" 
			done
		fi
	done
	for theme in *;do
		cp -r "${theme}/config/x11" "${__distro_path_system_blob_files}/${panel_name}/${theme}/config" 
	done
}

create_blob_system_files(){
	mkdir -p "${__distro_path_system_blob_files}"
	if command_exist polybar;then
		show_im "copy polybar blob_extra to system_files/blob ."
		cp -r "${__distro_path_root}"/blob/polybar "${__distro_path_system_blob_files}"
		cd "${__distro_path_root}"/blob_extra/polybar
		copy_X11_blob_files "polybar"
		for app in alacritty geany bspwm;do
			show_im "copy tint2 $app blob and blob_extra to system_files/blob ."
			if command_exist $app;then
				for theme in *;do
					cp -r "${theme}/config/${app}" "${__distro_path_system_blob_files}/polybar/${theme}/config" 
				done
			fi
		done
		if command_exist plank;then
			show_im "copy tint2 plank blob and blob_extra to system_files/blob ."
			for theme in *;do
				cp -r "${theme}/config/plank" "${__distro_path_system_blob_files}/polybar/${theme}/config" 
				cp -r "${theme}/cache" "${__distro_path_system_blob_files}/polybar/${theme}" 
			done
		fi
		if command_exist jgmenu;then
			show_im "copy polybar jgmenu blob_extra to system_files/blob ."
			for theme in *;do
				cp -r "${theme}/jgmenu_theme" "${__distro_path_system_blob_files}/polybar/${theme}" 
			done
		fi
	fi

	if command_exist tint2;then
		show_im "copy tint2 blob and blob_extra to system_files/blob ."
		cp -r "${__distro_path_root}"/blob/tint2 "${__distro_path_system_blob_files}" 
		cd "${__distro_path_root}"/blob_extra/tint2
		copy_X11_blob_files "tint2"
		for app in lxterminal alacritty geany bspwm;do
			if command_exist $app;then
				show_im "copy tint2 $app blob and blob_extra to system_files/blob ."
				for theme in *;do
					cp -r "${theme}/config/${app}" "${__distro_path_system_blob_files}/tint2/${theme}/config" 
				done
			fi
		done
		if command_exist jgmenu;then
			show_im "copy tint2 jgmenu blob_extra to system_files/blob ."
			for theme in *;do
				cp -r "${theme}/jgmenu_theme" "${__distro_path_system_blob_files}/tint2/${theme}" 
			done
		fi
	fi
}

create_auto_completion_files(){
	if command_exist bash;then
		mkdir -p "$__distro_path_enabled_completion"/bash
		
		ln -sf "$__distro_path_disabled_completion"/bash/repobin.bash "$__distro_path_enabled_completion"/bash/repobin.bash
		ln -sf "$__distro_path_disabled_completion"/bash/bash_completion "$__distro_path_enabled_completion"/bash/bash_completion
		
		if command_exist backports_install;then
			ln -sf "$__distro_path_disabled_completion"/bash/backports_install.bash "$__distro_path_enabled_completion"/bash/backports_install.bash
		fi
		if command_exist kali_install;then
			ln -sf "$__distro_path_disabled_completion"/bash/kali_install_auto_completion.bash "$__distro_path_enabled_completion"/bash/kali_install_auto_completion.bash
		fi
		if command_exist parrot_install;then
			ln -sf "$__distro_path_disabled_completion"/bash/parrot_install_auto_completion.bash "$__distro_path_enabled_completion"/bash/parrot_install_auto_completion.bash
		fi
		if command_exist fzf;then
			ln -sf "$__distro_path_disabled_completion"/bash/key-bindings.bash "$__distro_path_enabled_completion"/bash/key-bindings.bash
			ln -sf "$__distro_path_disabled_completion"/bash/completion.bash "$__distro_path_enabled_completion"/bash/completion.bash
		fi
	fi
	
	if command_exist zsh;then
		mkdir -p "$__distro_path_enabled_completion"/zsh
		
		ln -sf "$__distro_path_disabled_completion"/zsh/repobin.zsh "$__distro_path_enabled_completion"/zsh/repobin.zsh
		ln -sf "$__distro_path_disabled_completion"/zsh/_zap "$__distro_path_enabled_completion"/zsh/_zap
		
		if command_exist backports_install;then
			ln -sf "$__distro_path_disabled_completion"/zsh/backports_install.zsh "$__distro_path_enabled_completion"/zsh/backports_install.zsh
		fi
		if command_exist kali_install;then
			ln -sf "$__distro_path_disabled_completion"/zsh/kali_install_auto_completion.zsh "$__distro_path_enabled_completion"/zsh/kali_install_auto_completion.zsh
		fi
		if command_exist parrot_install;then
			ln -sf "$__distro_path_disabled_completion"/zsh/parrot_install_auto_completion.zsh "$__distro_path_enabled_completion"/zsh/parrot_install_auto_completion.zsh
		fi
		if command_exist fzf;then
			ln -sf "$__distro_path_disabled_completion"/zsh/key-bindings.zsh "$__distro_path_enabled_completion"/zsh/key-bindings.zsh
			ln -sf "$__distro_path_disabled_completion"/zsh/completion.zsh "$__distro_path_enabled_completion"/zsh/completion.zsh
		fi
	fi
}

ln_sf_files_depth1(){
	find "$1" -maxdepth 1 -type f -exec ln -sf {} "$2" \;
}

##################################################################################

show_im "update Databases ex: locate"
updatedb

############
# terminator
############
if command_exist terminator;then
	show_im "fix terminator"
	[ ! -d "/root/.config/terminator" ] && mkdir -p "/root/.config/terminator"
	[ ! -f "/root/.config/terminator/config" ] && cp -r "${__distro_path_root}"/skel_extra/.config/terminator/config "/root/.config/terminator"
	if grep -q 'always_on_top =' "/root/.config/terminator/config";then
		sed -i "s/always_on_top =.*/always_on_top = True/g" "/root/.config/terminator/config"
	else
		sed -i '0,/[global_config]/a dddddddddddddddddddd' "/root/.config/terminator/config"
		sed -i 's/dddddddddddddddddddd/  always_on_top = True/g' "/root/.config/terminator/config"
	fi
	
	if grep -q 'hide_window =' "/root/.config/terminator/config";then
		sed -i "s/hide_window =.*/hide_window = F10/g" "/root/.config/terminator/config"
	else
		sed -i '0,/[keybindings]/a xxxxxxxxxxxxxxxxxxxxx' "/root/.config/terminator/config"
		sed -i 's/xxxxxxxxxxxxxxxxxxxxx/  hide_window = F10/g' "/root/.config/terminator/config"
	fi
fi

############
# Remove "Set as wallpaper" from Thunar Context Menu and replace it with  "Set as wallpaper" from thunar config uac file
############
if command_exist thunar;then
	show_im "fix thunar"
	__thunar_wall_plug="$(locate thunar | grep "plugin.so" | grep "wall" | grep -v "\.backup" || :)"
	[ -f "${__thunar_wall_plug}" ] && [ ! -f "${__thunar_wall_plug}.backup" ] && mv "${__thunar_wall_plug}" "${__thunar_wall_plug}.backup"
fi

mkdir -p "/root/Templates"

##################################################################################

show_im "Create Custom OS release file."
if [ -f /etc/os-release ];then
	. /etc/os-release
	version_="$(echo "${VERSION_ID}" | tr -d '.')"
	root_distro_name="$ID"
	distro_desc="$PRETTY_NAME"
	distro_name_and_ver_="$root_distro_name$version_"
	distro_name_and_ver_2="${root_distro_name}_${version_}"
	version_codename="${VERSION_CODENAME}"
	VERSION_ID="$VERSION_ID"
fi

tee "${__distro_path_root}/os-release" <<- EOF > /dev/null 2>&1
version_="$version_"
root_distro_name="$root_distro_name"
distro_desc="$distro_desc"
distro_name_and_ver_="$distro_name_and_ver_"
distro_name_and_ver_2="$distro_name_and_ver_2"
version_codename="${version_codename}"
VERSION_ID="$VERSION_ID"
EOF

show_im "creating missing dir"
mkdir -p "${__distro_path_root}"/bin/my_installer/distrobox_center/Apps
mkdir -p "${__distro_path_root}"/bin/my_installer/distrobox_center/Gaming
if [ -d "${__distro_path_system_files}" ];then
	rm -rdf "${__distro_path_system_files}"
fi
mkdir -p "${__distro_path_system_files}"

show_im "create uniq system files"

mkdir -p "${__distro_path_updater}"
mkdir -p "${__distro_path_downloaded}"
mkdir -p "${__distro_path_git}"
mkdir -p "${_DEPLOYED_CONTAINERS_LIBDIR}"
mkdir -p "${__distro_path_external}"/auto_completion

mkdir -p "${__distro_path_system_files}"/applications

mkdir -p "${__distro_path_system_ready}"
mkdir -p "${__distro_path_neverremove}"

mkdir -p "${_distro_xsessions_desktop_path}"

show_im "LN essional files"
mkdir -p "${__distro_path_system_files}/bin"
mkdir -p "${__distro_path_system_files}/binX11"
ln_sf_files_depth1 "${__distro_path_root}/bin/X11/session_managers/clipboard-manager-session" "${__distro_path_system_files}/binX11"
ln_sf_files_depth1 "${__distro_path_root}/bin/X11/cli" "${__distro_path_system_files}/binX11"
ln_sf_files_depth1 "${__distro_path_root}/bin_extra/X11/cli" "${__distro_path_system_files}/binX11"

mkdir -p "${__distro_for_all_path}"
chmod 777 "${__distro_for_all_path}"

if [ "$machine_type_are" = "laptop" ];then 
	show_im "this is laptop"
	touch "${__distro_path_system_ready}/this_is_laptop"
fi

if dmesg | grep -qi bluetooth || lsusb 2>/dev/null | grep -qi bluetooth || [ -d "/sys/class/bluetooth" ];then
	show_im "has bluetooth"
	touch "${__distro_path_system_ready}"/has_bluetooth
	cp -r "${__distro_path_root}/bin/not_add_2_path/session_managers/bt-session" "${__distro_path_system_files}/bin"
fi

show_im "copy skell file to system_files/skel ."
cp -r "${__distro_path_root}/skel" "${__distro_path_system_files}"
mkdir -p "${__distro_path_system_skel_files}/${WM_config_dir_name}"
cp -r "${__distro_path_root}/lib/rc.xml" "${__distro_path_system_files}/rc.xml"
mkdir -p "${__distro_path_system_skel_files}/.local/bin"

mkdir -p "${__distro_path_system_files}"/skel/.config/mpd/playlists
touch "${__distro_path_system_files}"/skel/.config/mpd/database
mkdir -p "${__distro_path_system_files}"/skel/.local/share/bash_history

if command_exist conky;then
	show_im "copy conky skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/conky" "${__distro_path_system_skel_files}/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/conky-session" "${__distro_path_system_files}"/binX11
	copy_all__application_link_in_dir "conky"
fi
if command_exist dunst;then
	show_im "copy dunst skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/dunst" "${__distro_path_system_skel_files}/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/notification-d-session" "${__distro_path_system_files}"/binX11
fi
if command_exist openbox;then
	show_im "copy openbox skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/openbox" "${__distro_path_system_skel_files}/.config"
	[ -d "/var/lib/openbox" ] && [ ! -f "/var/lib/openbox/debian-menu.xml" ] && [ -f "/etc/xdg/openbox/menu.xml" ] && cp -r "/etc/xdg/openbox/menu.xml" "/var/lib/openbox/debian-menu.xml"
fi
if command_exist rofi;then
	show_im "copy rofi skell file to system_files/skel ."
	if [ -d "${__distro_path_root}/bin/X11/rofi" ];then
		show_im "rofi bin files to system_files/bin ."
		ln_sf_files_depth1 "${__distro_path_root}/bin/X11/rofi" "${__distro_path_system_files}"/binX11
		ln_sf_files_depth1 "${__distro_path_root}/bin_extra/X11/rofi" "${__distro_path_system_files}"/binX11
	fi
	cp -r "${__distro_path_root}/skel_extra/.config/rofi" "${__distro_path_system_skel_files}/.config"
	copy_all__application_link_in_dir "rofi"
fi
if command_exist xrdb;then
	show_im "copy x11 skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/x11" "${__distro_path_system_skel_files}/.config"
fi

if command_exist geany;then
	show_im "copy geany skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/geany" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist lf;then
	show_im "copy lf skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/lf" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist nsxiv || command_exist sxiv;then
	show_im "copy nsxiv skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/nsxiv" "${__distro_path_system_skel_files}/.config"
	cp -r "${__distro_path_root}/skel_extra/.config/sxiv" "${__distro_path_system_skel_files}/.config"
	ln_sf_files_depth1 "${__distro_path_root}/bin_extra/X11/nsxiv" "${__distro_path_system_files}"/binX11
fi

if command_exist viewnior;then
	show_im "copy viewnior skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/viewnior" "${__distro_path_system_skel_files}/.config"
fi

if command_exist terminator;then
	show_im "copy terminator skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/terminator" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist tmu;then
	show_im "copy tmu skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/tmu" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist pcmanfm;then
	show_im "copy pcmanfm skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/pcmanfm" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist thunar;then
	show_im "copy gigolo skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/Thunar" "${__distro_path_system_skel_files}/.config"
	cp -r "${__distro_path_root}/skel_extra/.config/xfce4" "${__distro_path_system_skel_files}/.config"
fi

if command_exist gigolo;then
	show_im "copy gigolo skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/gigolo" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist plank;then
	show_im "copy plank skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/plank" "${__distro_path_system_skel_files}/.config" 
	cp -r "${__distro_path_root}/skel_extra/.local/share/plank" "${__distro_path_system_skel_files}/.local/share/"
	cp -r "${__distro_path_root}/bin/X11/session_managers/plank-session" "${__distro_path_system_files}"/binX11 
fi

if command_exist xbindkey;then
	show_im "copy xbindkey skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.xbindkeysrc" "${__distro_path_system_skel_files}" 
fi

if command_exist parcellite;then
	show_im "copy parcellite skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/parcellite" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist clipit;then
	show_im "copy clipit skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/clipit" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist jgmenu;then
	show_im "copy jgmenu skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/jgmenu" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist greenclip;then
	show_im "copy greenclip skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/greenclip.toml" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist zathura;then
	show_im "copy zathura skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/zathura" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist tint2;then
	show_im "copy tint2 skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/tint2" "${__distro_path_system_skel_files}/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/tint2-session" "${__distro_path_system_files}"/binX11
	copy_all__application_link_in_dir "tint2"
fi

if command_exist lxterminal;then
	show_im "copy lxterminal skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/lxterminal" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist cava;then
	show_im "copy cava skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/cava" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist cmus;then
	show_im "copy cmus skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/cmus" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist alacritty;then
	show_im "copy alacritty skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/alacritty" "${__distro_path_system_skel_files}/.config"
fi

if command_exist bspwm;then
	show_im "copy bspwm skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/bspwm" "${__distro_path_system_skel_files}/.config" 
	cp -r "${__distro_path_root}/skel_extra/.config/sxhkd" "${__distro_path_system_skel_files}/.config" 
fi

if command_exist dwm;then
	show_im "copy dwm skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/dwm" "${__distro_path_system_skel_files}/.config"
fi

if command_exist polybar;then
	show_im "copy polybar skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/polybar" "${__distro_path_system_skel_files}/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/polybar-session" "${__distro_path_system_files}"/binX11
	"${__distro_path_root}"/bin/X11/polybar/polybar_fixes_based_on_ver
fi

if command_exist yad;then
	show_im "copy yad bin to system_files/bin ."
	if [ -d "${__distro_path_root}/bin/X11/yad" ];then
		ln_sf_files_depth1 "${__distro_path_root}/bin/X11/yad" "${__distro_path_system_files}"/binX11
	fi
	if [ -d "${__distro_path_root}/bin_extra/X11/yad" ];then
		ln_sf_files_depth1 "${__distro_path_root}/bin_extra/X11/yad" "${__distro_path_system_files}"/binX11
	fi
	copy_all__application_link_in_dir "yad"
	if [ -f "${__distro_path_system_ready}/this_is_laptop" ];then
		show_im "yad laptop stuff."
		if [ -d "${__distro_path_root}/bin/X11/yad/laptop" ];then
			show_im "laptop bin files to system_files/binX11 ."
			ln_sf_files_depth1 "${__distro_path_root}/bin/X11/yad/laptop" "${__distro_path_system_files}"/binX11
		fi
		create_applicationsdotdesktop_link "yadtlp"
	fi
fi

if command_exist picom;then
	show_im "copy picom skell file to system_files/skel ."
	if [ "$machine_type_are" = "vm" ];then
		cp -r "${__distro_path_root}/skel_extra/.config/vm-picom.conf" "${__distro_path_system_skel_files}/.config/picom.conf"
	else
		cp -r "${__distro_path_root}/skel_extra/.config/phy-picom.conf" "${__distro_path_system_skel_files}/.config/picom.conf"
	fi
	cp -r "${__distro_path_root}/bin/X11/session_managers/picom-session" "${__distro_path_system_files}"/binX11
	if [ -f /etc/xdg/autostart/picom.desktop ];then
		rm -f /etc/xdg/autostart/picom.desktop
	fi
fi

if [ "$machine_type_are" = "vm" ];then
	show_im "disable vsync from mpv (VM)."
	sed -i 's/vo=gpu/#vo=gpu/g' "${__distro_path_system_files}"/skel/.config/mpv/mpv.conf
fi
	
show_im "LN bin files to system_files/bin ."

if [ -d "${__distro_path_root}/bin/cli" ];then
	show_im "bin cli files to system_files/bin ."
	ln_sf_files_depth1 "${__distro_path_root}/bin/cli" "${__distro_path_system_files}"/bin
fi

if [ -d "${__distro_path_root}/Distro_Specific/bin" ];then
	show_im "bin Distro_Specific files to system_files/bin ."
	ln_sf_files_depth1 "${__distro_path_root}/Distro_Specific/bin" "${__distro_path_system_files}"/bin
fi

if [ -d "${__distro_path_root}/bin_extra/cli" ];then
	show_im "exra cli files to system_files/bin ."
	ln_sf_files_depth1 "${__distro_path_root}/bin_extra/cli" "${__distro_path_system_files}"/bin
fi

if [ -d "${__distro_path_root}/bin/status" ];then
	show_im "status bin files to system_files/bin ."
	ln_sf_files_depth1 "${__distro_path_root}/bin/status" "${__distro_path_system_files}"/bin
fi

if [ -d "${__distro_path_root}/bin/gui" ];then
	show_im "gui bin files to system_files/bin ."
	ln_sf_files_depth1 "${__distro_path_root}/bin/gui" "${__distro_path_system_files}"/bin
	if ! command_exist systemctl;then
		rm -f "${__distro_path_system_files}"/binX11/yautostart
		rm -f "${__distro_path_system_files}"/bin/errcheck
		rm -f "${__distro_path_system_files}"/bin/bootman
	fi
fi

if [ -d "${__distro_path_root}/bin/session_managers" ];then
	show_im "session_managers bin files to system_files/bin ."
	ln_sf_files_depth1 "${__distro_path_root}/bin/session_managers" "${__distro_path_system_files}"/bin
fi

show_im "nbrowser bin files to system_files/bin ."
ln -sf "${__distro_path_root}"/bin/X11/not_add_2_path/nbrowser/nbrowser "${__distro_path_system_files}"/binX11
create_applicationsdotdesktop_link "nbrowser"

if [ -f "${__distro_path_system_ready}/this_is_laptop" ];then
	show_im "laptop stuff."
	if [ -d "${__distro_path_root}/bin/X11/laptop" ];then
		show_im "laptop bin files to system_files/binX11 ."
		ln_sf_files_depth1 "${__distro_path_root}/bin/X11/laptop" "${__distro_path_system_files}"/binX11
	fi
fi

show_im "copy doas.conf to correct location."
cp -rp "${__distro_path_root}/lib/apps/doas/doas.conf" "${__distro_path_system_files}/doas.conf"

show_im "pick correct apps_as_root."
if command_exist doas;then
	ln -sf "${__distro_path_root}"/bin/doas/doasedit "${__distro_path_root}"/system_files/bin
	cp -rp "${__distro_path_root}"/system_files/doas.conf /etc
	if ! doas -C /etc/doas.conf;then
		show_em "config error"
	fi
fi	

if command_exist python;then
	ln -sf "${__distro_path_root}"/bin/not_add_2_path/oops/oops.python "${__distro_path_system_files}"/bin/theoops
elif command_exist python3;then
	ln -sf "${__distro_path_root}"/bin/not_add_2_path/oops/oops.python3 "${__distro_path_system_files}"/bin/theoops
fi

if command_exist arandr;then
	create_applicationsdotdesktop_link "arandr"
fi

if command_exist kvantummanager;then
	create_applicationsdotdesktop_link "kvantummanager"
fi

if command_exist lightdm-gtk-greeter-settings-pkexec;then
	create_applicationsdotdesktop_link "lightdm-gtk-greeter-settings-pkexec"
fi

if command_exist lxappearance;then
	create_applicationsdotdesktop_link "lxappearance"
fi

if command_exist obconf;then
	create_applicationsdotdesktop_link "obconf"
fi

if command_exist qt5ct;then
	create_applicationsdotdesktop_link "qt5ct"
fi

if command_exist nvim;then
	create_applicationsdotdesktop_link "Neovim"
	cp -r "${__distro_path_root}/bin/not_add_2_path/my-vim" "${__distro_path_system_files}/bin"
fi

if command_exist docker;then
	create_applicationsdotdesktop_link "Docker"
fi

if command_exist google-chrome;then
	create_applicationsdotdesktop_link "WhatsApp"
fi

if command_exist flatpak;then
	if flatpak list | grep -q pinta;then
		create_applicationsdotdesktop_link "pinta"
	fi
	
	if flatpak list | grep -q obsidian;then
		create_applicationsdotdesktop_link "obsidian"
	fi
	
	if flatpak list | grep -q audacity;then
		create_applicationsdotdesktop_link "audacity"
	fi
fi

create_auto_completion_files

show_im "prepares gui scripts dir"
. "${pipemenu_creater}/gui-apps-pipemenu-dir" || show_em "failed to run ${pipemenu_creater}/gui-apps-pipemenu-dir"

##################################################################################

show_im "Running script for create_DB.sh --all"
${__distro_path_root}/bin/WM/create_DB.sh --all || show_em "failed to run create_DB.sh"

show_im "Running must_create_script."
for script_dir in "${__distro_path_root}"/bin/must_create_script/*;do
	show_im "running $(basename "$script_dir"). from must_create_script ."
	cd "${script_dir}"
	./make || show_em "failed to run make"
done
for script_dir in "${__distro_path_root}"/bin/X11/must_create_script/*;do
	show_im "running $(basename "$script_dir"). from must_create_script ."
	cd "${script_dir}"
	./make || show_em "failed to run make"
done

show_im "Create keybinds."
"${__distro_path_system_files}"/binX11/keybinds --initial-step || show_em "failed to run keybinds --initial-step"

ln -sf "${__distro_path_root}"/distro_manager/full-upgrade "${__distro_path_system_files}"/bin

if command_exist conky;then
	show_im "Create conky weather icons."
	"${__distro_path_root}"/bin/X11/conky/conky_weather_icon || show_em "failed to run conky/conky_weather_icon"
fi

show_im "Add SSH theme."
if service_manager status ssh;then
	show_im "copy shell skel file related to ssh file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.bash_profile" "${__distro_path_system_skel_files}"
	if command_exist zsh;then
		cp -r "${__distro_path_root}/skel_extra/.zshenv" "${__distro_path_system_skel_files}"
	fi
fi

create_blob_system_files

show_im "prepares hub script dir"
"${__distro_path_root}"/bin/X11/rofi/hub create || show_em "failed to run hub create"

show_im "sed (((distro_path_root)) to ${__distro_path_root} ."
sed_distro_path_root_var_2_correct_value "${__distro_path_system_skel_files}"
sed_distro_path_root_var_2_correct_value "${__distro_path_system_blob_files}"

if command_exist openbox;then
	show_im "create ${__custom_distro_name}_openbox to xsessions."
	create_applicationsdotdesktop_4_xsessions "openbox" "openbox"
fi

if command_exist dwm;then
	show_im "create ${__custom_distro_name}_dwm to xsessions."
	create_applicationsdotdesktop_4_xsessions "dwm" "dwm"
fi

if command_exist bspwm;then
	show_im "create ${__custom_distro_name}_bspwm to xsessions."
	create_applicationsdotdesktop_4_xsessions "bspwm" "bspwm"
fi

show_im "Configer Global get_weather."
"${__distro_path_root}"/system_files/bin/get_weather --global "$__timezone"

. "${__distro_path_root}/lib/common/DB"
. "${__distro_path_root}/lib/common/my_installer_and_DB_dir"

for app in podman distrobox;do
	if command_exist ${app};then
		dir_name="$(basename $(dirname $(find "${_APPS_LIBDIR}" "${_APPS_EXTRA_LIBDIR}" -type f -name ${app} )))"
		[ ! -f "${apps_db_path}/$dir_name" ] && touch "${apps_db_path}/$dir_name"
		echo "${app}" | tee -a "${apps_db_path}/$dir_name" >/dev/null 2>&1
	fi
done

if command_exist neofetch;then
	ln -sf "$(which neofetch)" "${__distro_path_system_files}/bin/distro_fetch"
else
	ln -sf "${__distro_path_system_files}/bin/pfetch" "${__distro_path_system_files}/bin/distro_fetch"
fi

if command_exist btop;then
	ln -sf "$(which btop)" "${__distro_path_system_files}/bin/distro_top"
elif command_exist bpytop;then
	ln -sf "$(which bpytop)" "${__distro_path_system_files}/bin/distro_top"
elif command_exist htop;then
	ln -sf "$(which htop)" "${__distro_path_system_files}/bin/distro_top"
fi

find "${__distro_path_system_skel_files}" -type f -exec sed -i "s|(((__distro_path_root)))|${__distro_path_root}|g" {} +
find "${__distro_path_system_skel_files}" -type f -exec sed -i "s|(((__distro_path_enabled_completion)))|${__distro_path_enabled_completion}|g" {} +
find "${__distro_path_system_skel_files}" -type f -exec sed -i "s|(((__distro_path_system_ready)))|${__distro_path_system_ready}|g" {} +
find "${__distro_path_system_skel_files}" -type f -exec sed -i "s|(((__distro_path_neverremove)))|${__distro_path_neverremove}|g" {} +
find "${__distro_path_system_skel_files}" -type f -exec sed -i "s|(((__distro_path_themes)))|${__distro_path_themes}|g" {} +
find "${__distro_path_system_skel_files}" -type f -exec sed -i "s|(((__distro_path_all_distro_themes)))|${__distro_path_all_distro_themes}|g" {} +
. "${__distro_path_root}/Distro_Specific/disto_icon"
find "${__distro_path_system_skel_files}" -type f -exec sed -i "s|(((distro_icon)))|${distro_icon}|g" {} +

show_im "Adding applications desktop files"
for f in "${__distro_path_root}"/applications/*;do
	ln -sf "$f" /usr/share/applications
done

show_im "Create openbox themes"
"${__distro_path_all_distro_themes}"/openbox_themes_creater/prepare_themes "$__distro_path_lib"

show_im "Adding themes"
mkdir -p /usr/share/themes
for d in "${__distro_path_themes}"/system-themes/* "${__distro_path_themes}"/openbox_themes/*;do
	ln -sf "$d" /usr/share/themes
done

show_im "Adding icons and cursors"
mkdir -p /usr/share/icons
for d in "${__distro_path_themes}"/system-icons/* "${__distro_path_all_distro_themes}"/cursors/* "${__distro_path_all_distro_themes}"/lightdm-icons;do
	ln -sf "$d" /usr/share/icons
done

show_im "Adding fonts"
mkdir -p /usr/share/fonts
for e in "${__distro_path_all_distro_themes}"/fonts/*;do
	ln -sf "$e" /usr/share/fonts
done

if ! command_exist magick;then
	show_im "Create symboliclink to magick from convert."
	if command_exist convert;then
		ln -sf "$(which convert)" /usr/bin/magick
	fi
fi

fzf_version_output="$(fzf --version | awk '{print $1}')"
fzf_version_major="$(printf "%s" "$fzf_version_output" | awk -F'.' '{print $1}')"
fzf_version_minor="$(printf "%s" "$fzf_version_output" | awk -F'.' '{print $2}')"

if [ "$fzf_version_major" -eq 0 ];then
	if [ "$fzf_version_minor" -le 38 ];then
		sed -i 's/--style minimal //g' "${__distro_path_system_skel_files}/.config/myshell/profile.sh" 
	fi
fi

show_im "system_files_creater Done."

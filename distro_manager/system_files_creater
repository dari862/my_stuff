#!/bin/sh
set -e

. "/usr/share/my_stuff/lib/common/Distro_path"
. "${__distro_path_root}/lib/common/WM"
. "${__distro_path_root}/lib/common/common"
. "${__distro_path_root}/lib/common/my_installer_and_DB_dir"

if [ ! -f "${__distro_path_root}/never_remove/machine_type" ];then
	. "${__distro_path_root}/lib/common/machine_type"
	machine_type_are="$(check_machine_type)"
	printf '%s' "$machine_type_are" | tee "${__distro_path_root}/never_remove/machine_type" >/dev/null 2>&1
else
	machine_type_are="$(cat "${__distro_path_root}/never_remove/machine_type")"
fi

pipemenu_creater="${__distro_path_root}/bin/X11/pipemenu/create_pipemenu"

PATH="${__distro_path_root}/bin/bin:$PATH"

##################################################################################

show_m(){
	message="${1-}"
	printf '%b' "\n==[ \\033[1;32m${message}\\033[0m ]==\n"
}

show_wm(){
	message="${1-}"
	printf '%b' "\\033[1;33m[!] \\033[0m${message}\n"
}

show_em(){
	message="${1-}"
	printf '%b' "\\033[1;31m[-] ${message}\\033[0m\n"
	exit 1 # show_em
}

show_im(){
	message="${1-}"
	printf '%b' "\\033[1;34m[*] \\033[0m${message}\n"
}

copy_X11_blob_files(){
	panel_name="${1:-}"
	if command -v openbox >/dev/null 2>&1;then
		for theme in *;do
			cp -r "${theme}/openboxrctheme" "${__distro_path_root}/system_files/blob/${panel_name}/${theme}" 
		done
	fi
	for app in dunst openbox rofi;do
		show_im "copy $app blob and blob_extra to system_files/blob ."
		if command -v $app >/dev/null 2>&1;then
			for theme in *;do
				cp -r "${theme}/config/${app}" "${__distro_path_root}/system_files/blob/${panel_name}/${theme}/config" 
			done
		fi
	done
	for theme in *;do
		cp -r "${theme}/config/x11" "${__distro_path_root}/system_files/blob/${panel_name}/${theme}/config" 
	done
}

create_blob_system_files(){
	mkdir -p "${__distro_path_root}/system_files/blob"
	if command -v polybar >/dev/null 2>&1;then
		show_im "copy polybar blob_extra to system_files/blob ."
		cp -r "${__distro_path_root}"/blob/polybar "${__distro_path_root}/system_files/blob"
		cd "${__distro_path_root}"/blob_extra/polybar
		copy_X11_blob_files "polybar"
		for app in alacritty geany bspwm;do
			show_im "copy tint2 $app blob and blob_extra to system_files/blob ."
			if command -v $app >/dev/null 2>&1;then
				for theme in *;do
					cp -r "${theme}/config/${app}" "${__distro_path_root}/system_files/blob/polybar/${theme}/config" 
				done
			fi
		done
		if command -v plank >/dev/null 2>&1;then
			show_im "copy tint2 plank blob and blob_extra to system_files/blob ."
			for theme in *;do
				cp -r "${theme}/config/plank" "${__distro_path_root}/system_files/blob/polybar/${theme}/config" 
				cp -r "${theme}/cache" "${__distro_path_root}/system_files/blob/polybar/${theme}" 
			done
		fi
		if command -v jgmenu >/dev/null 2>&1;then
			show_im "copy polybar jgmenu blob_extra to system_files/blob ."
			for theme in *;do
				cp -r "${theme}/jgmenu_theme" "${__distro_path_root}/system_files/blob/polybar/${theme}" 
			done
		fi
	fi

	if command -v tint2 >/dev/null 2>&1;then
		show_im "copy tint2 blob and blob_extra to system_files/blob ."
		cp -r "${__distro_path_root}"/blob/tint2 "${__distro_path_root}/system_files/blob" 
		cd "${__distro_path_root}"/blob_extra/tint2
		copy_X11_blob_files "tint2"
		for app in lxterminal alacritty geany bspwm;do
			if command -v $app >/dev/null 2>&1;then
				show_im "copy tint2 $app blob and blob_extra to system_files/blob ."
				for theme in *;do
					cp -r "${theme}/config/${app}" "${__distro_path_root}/system_files/blob/tint2/${theme}/config" 
				done
			fi
		done
		if command -v jgmenu >/dev/null 2>&1;then
			show_im "copy tint2 jgmenu blob_extra to system_files/blob ."
			for theme in *;do
				cp -r "${theme}/jgmenu_theme" "${__distro_path_root}/system_files/blob/tint2/${theme}" 
			done
		fi
	fi
}

create_applicationsdotdesktop_link(){
	__application_name="${1:-}"
	__application_command="${2:-}"
    if [ -f "${__distro_path_root}/applications_extra/${__application_name}.desktop" ];then
    	cp -r "${__distro_path_root}/applications_extra/${__application_name}.desktop" "${__distro_path_root}/system_files/applications/${__application_name}.desktop"
    	ln -sf "${__distro_path_root}/system_files/applications/${__application_name}.desktop" "/usr/share/applications"
    else
    	[ -z "$__application_command" ] && __application_command="${__application_name}"
    	tee "${__distro_path_root}/system_files/applications/${__application_name}.desktop" <<- EOF >/dev/null 2>&1
    	[Desktop Entry]
		Name=${__application_name}
		Comment=${__application_name}
		Exec=${__application_command}
		Terminal=false
		Type=Application
		Icon=flatpak
		Categories=GTK;
		MimeType=text/html;text/xml;application/xhtml_xml;
		StartupNotify=true
		EOF
    	ln -sf "${__distro_path_root}/system_files/applications/${__application_name}.desktop" "/usr/share/applications"
    fi
}

copy_all__application_link_in_dir(){
	__application_link_dir="${1:-}"
    cp -r "${__distro_path_root}/applications_extra/${__application_link_dir}"/* "${__distro_path_root}/system_files/applications"
    ln -sf "${__distro_path_root}/system_files/applications/${__application_link_dir}"/* "/usr/share/applications"
}

create_auto_completion_files(){
	if command -v bash >/dev/null 2>&1;then
		mkdir -p "$__distro_path_enabled_completion"/bash
		
		ln -sf "$__distro_path_disabled_completion"/bash/repobin.bash "$__distro_path_enabled_completion"/bash/repobin.bash
		ln -sf "$__distro_path_disabled_completion"/bash/bash_completion "$__distro_path_enabled_completion"/bash/bash_completion
		
		command -v backports_install >/dev/null 2>&1 && ln -sf "$__distro_path_disabled_completion"/bash/backports_install.bash "$__distro_path_enabled_completion"/bash/backports_install.bash
		command -v kali_install >/dev/null 2>&1 && ln -sf "$__distro_path_disabled_completion"/bash/kali_install_auto_completion.bash "$__distro_path_enabled_completion"/bash/kali_install_auto_completion.bash
		command -v parrot_install >/dev/null 2>&1 && ln -sf "$__distro_path_disabled_completion"/bash/parrot_install_auto_completion.bash "$__distro_path_enabled_completion"/bash/parrot_install_auto_completion.bash
		if command -v fzf >/dev/null 2>&1;then
			ln -sf "$__distro_path_disabled_completion"/bash/key-bindings.bash "$__distro_path_enabled_completion"/bash/key-bindings.bash
			ln -sf "$__distro_path_disabled_completion"/bash/completion.bash "$__distro_path_enabled_completion"/bash/completion.bash
		fi
	fi
	
	if command -v zsh >/dev/null 2>&1;then
		mkdir -p "$__distro_path_enabled_completion"/zsh
		
		ln -sf "$__distro_path_disabled_completion"/zsh/repobin.zsh "$__distro_path_enabled_completion"/zsh/repobin.zsh
		ln -sf "$__distro_path_disabled_completion"/zsh/_zap "$__distro_path_enabled_completion"/zsh/_zap
		
		command -v backports_install >/dev/null 2>&1 && ln -sf "$__distro_path_disabled_completion"/zsh/backports_install.zsh "$__distro_path_enabled_completion"/zsh/backports_install.zsh
		command -v kali_install >/dev/null 2>&1 && ln -sf "$__distro_path_disabled_completion"/zsh/kali_install_auto_completion.zsh "$__distro_path_enabled_completion"/zsh/kali_install_auto_completion.zsh
		command -v parrot_install >/dev/null 2>&1 && ln -sf "$__distro_path_disabled_completion"/zsh/parrot_install_auto_completion.zsh "$__distro_path_enabled_completion"/zsh/parrot_install_auto_completion.zsh
		if command -v fzf >/dev/null 2>&1;then
			ln -sf "$__distro_path_disabled_completion"/zsh/key-bindings.zsh "$__distro_path_enabled_completion"/zsh/key-bindings.zsh
			ln -sf "$__distro_path_disabled_completion"/zsh/completion.zsh "$__distro_path_enabled_completion"/zsh/completion.zsh
		fi
	fi
}

##################################################################################

show_im "update Databases ex: locate"
updatedb

############
# terminator
############
if command -v terminator >/dev/null 2>&1;then
	show_im "fix terminator"
	[ ! -d "/root/.config/terminator" ] && mkdir -p "/root/.config/terminator"
	[ ! -f "/root/.config/terminator/config" ] && cp -r "${__distro_path_root}"/skel_extra/.config/terminator/config "/root/.config/terminator"
	if grep -q 'always_on_top =' "/root/.config/terminator/config";then
		sed -i "s/always_on_top =.*/always_on_top = True/g" "/root/.config/terminator/config"
	else
		sed -i '0,/[global_config]/a dddddddddddddddddddd' "/root/.config/terminator/config"
		sed -i 's/dddddddddddddddddddd/  always_on_top = True/g' "/root/.config/terminator/config"
	fi
	
	if grep -q 'hide_window =' "/root/.config/terminator/config";then
		sed -i "s/hide_window =.*/hide_window = F10/g" "/root/.config/terminator/config"
	else
		sed -i '0,/[keybindings]/a xxxxxxxxxxxxxxxxxxxxx' "/root/.config/terminator/config"
		sed -i 's/xxxxxxxxxxxxxxxxxxxxx/  hide_window = F10/g' "/root/.config/terminator/config"
	fi
fi

############
# Remove "Set as wallpaper" from Thunar Context Menu and replace it with  "Set as wallpaper" from thunar config uac file
############
if command -v thunar >/dev/null 2>&1;then
	show_im "fix thunar"
	__thunar_wall_plug="$(locate thunar | grep "plugin.so" | grep "wall" | grep -v "\.backup" || :)"
	[ -f "${__thunar_wall_plug}" ] && [ ! -f "${__thunar_wall_plug}.backup" ] && mv "${__thunar_wall_plug}" "${__thunar_wall_plug}.backup"
fi

mkdir -p "/root/Templates"

##################################################################################
show_im "creating missing dir"
mkdir -p "${__distro_path_root}"/bin/my_installer/distrobox_center/Apps
mkdir -p "${__distro_path_root}"/bin/my_installer/distrobox_center/Gaming
[ -d "${__distro_path_root}"/system_files ] && rm -rdf "${__distro_path_root}"/system_files
mkdir -p "${__distro_path_root}"/system_files

show_im "copy doas.conf to correct location."
cp -rp "${__distro_path_root}/lib/apps/doas/doas.conf" "${__distro_path_root}/system_files/doas.conf"

show_im "create uniq system files"

mkdir -p "${__distro_path_updater}"
mkdir -p "${__distro_path_downloaded}"
mkdir -p "${__distro_path_git}"
mkdir -p "${_DEPLOYED_CONTAINERS_LIBDIR}"
mkdir -p "${__distro_path_external}"/auto_completion

mkdir -p "${__distro_path_root}"/system_files/applications

show_im "LN essional files"
mkdir -p "${__distro_path_root}/system_files/bin"
mkdir -p "${__distro_path_root}/system_files/binX11"
ln -sf "${__distro_path_root}/bin/X11/bin"/* "${__distro_path_root}/system_files/binX11"
ln -sf "${__distro_path_root}/bin/X11/session_managers/clipboard-manager-session" "${__distro_path_root}/system_files/binX11"
ln -sf "${__distro_path_root}/bin/X11/WM"/* "${__distro_path_root}/system_files/binX11"

if [ "$machine_type_are" = "laptop" ];then 
	show_im "this is laptop"
	touch "${__distro_path_root}"/system_files/this_is_laptop
fi

if dmesg | grep -qi bluetooth || lsusb 2>/dev/null | grep -qi bluetooth || [ -d "/sys/class/bluetooth" ];then
	show_im "has bluetooth"
	touch "${__distro_path_root}"/system_files/has_bluetooth
	cp -r "${__distro_path_root}/bin/not_add_2_path/session_managers/bt-session" "${__distro_path_root}/system_files/bin"
fi

show_im "copy skell file to system_files/skel ."
cp -r "${__distro_path_root}/skel" "${__distro_path_root}/system_files"
mkdir -p "${__distro_path_root}/system_files/skel/${WM_config_dir_name}"
cp -r "${__distro_path_root}/lib/rc.xml" "${__distro_path_root}/system_files/rc.xml"
mkdir -p "${__distro_path_root}/system_files/skel/.local/bin"

mkdir -p "${__distro_path_root}"/system_files/skel/.config/mpd/playlists
touch "${__distro_path_root}"/system_files/skel/.config/mpd/database
mkdir -p "${__distro_path_root}"/system_files/skel/.local/share/bash_history

if command -v conky >/dev/null 2>&1;then
	show_im "copy conky skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/conky" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/conky-session" "${__distro_path_root}"/system_files/binX11
	copy_all__application_link_in_dir "conky"
fi
if command -v dunst >/dev/null 2>&1;then
	show_im "copy dunst skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/dunst" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/dunst-session" "${__distro_path_root}"/system_files/binX11
fi
if command -v openbox >/dev/null 2>&1;then
	show_im "copy openbox skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/openbox" "${__distro_path_root}/system_files/skel/.config"
	[ -d "/var/lib/openbox" ] && [ ! -f "/var/lib/openbox/debian-menu.xml" ] && [ -f "/etc/xdg/openbox/menu.xml" ] && cp -r "/etc/xdg/openbox/menu.xml" "/var/lib/openbox/debian-menu.xml"
fi
if command -v rofi >/dev/null 2>&1;then
	show_im "copy rofi skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/rofi" "${__distro_path_root}/system_files/skel/.config"
	copy_all__application_link_in_dir "rofi"
fi
if command -v xrdb >/dev/null 2>&1;then
	show_im "copy x11 skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/x11" "${__distro_path_root}/system_files/skel/.config"
fi

if command -v geany >/dev/null 2>&1;then
	show_im "copy geany skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/geany" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v lf >/dev/null 2>&1;then
	show_im "copy lf skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/lf" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v nsxiv >/dev/null 2>&1 || command -v sxiv >/dev/null 2>&1;then
	show_im "copy nsxiv skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/nsxiv" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/skel_extra/.config/sxiv" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/bin/X11/nsxiv"/* "${__distro_path_root}"/system_files/binX11
fi

if command -v viewnior >/dev/null 2>&1;then
	show_im "copy viewnior skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/viewnior" "${__distro_path_root}/system_files/skel/.config"
fi

if command -v terminator >/dev/null 2>&1;then
	show_im "copy terminator skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/terminator" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v tmu >/dev/null 2>&1;then
	show_im "copy tmu skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/tmu" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v pcmanfm >/dev/null 2>&1;then
	show_im "copy pcmanfm skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/pcmanfm" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v thunar >/dev/null 2>&1;then
	show_im "copy gigolo skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/Thunar" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/skel_extra/.config/xfce4" "${__distro_path_root}/system_files/skel/.config"
fi

if command -v gigolo >/dev/null 2>&1;then
	show_im "copy gigolo skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/gigolo" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v plank >/dev/null 2>&1;then
	show_im "copy plank skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/plank" "${__distro_path_root}/system_files/skel/.config" 
	cp -r "${__distro_path_root}/skel_extra/.local/share/plank" "${__distro_path_root}/system_files/skel/.local/share/"
	cp -r "${__distro_path_root}/bin/X11/session_managers/plank-session" "${__distro_path_root}"/system_files/binX11 
fi

if command -v xbindkey >/dev/null 2>&1;then
	show_im "copy xbindkey skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.xbindkeysrc" "${__distro_path_root}/system_files/skel" 
fi

if command -v parcellite >/dev/null 2>&1;then
	show_im "copy parcellite skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/parcellite" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v clipit >/dev/null 2>&1;then
	show_im "copy clipit skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/clipit" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v jgmenu >/dev/null 2>&1;then
	show_im "copy jgmenu skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/jgmenu" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v greenclip >/dev/null 2>&1;then
	show_im "copy greenclip skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/greenclip.toml" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v zathura >/dev/null 2>&1;then
	show_im "copy zathura skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/zathura" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v tint2 >/dev/null 2>&1;then
	show_im "copy tint2 skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/tint2" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/tint2-session" "${__distro_path_root}"/system_files/binX11
	copy_all__application_link_in_dir "tint2"
fi

if command -v lxterminal >/dev/null 2>&1;then
	show_im "copy lxterminal skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/lxterminal" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v cava >/dev/null 2>&1;then
	show_im "copy cava skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/cava" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v cmus >/dev/null 2>&1;then
	show_im "copy cmus skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/cmus" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v alacritty >/dev/null 2>&1;then
	show_im "copy alacritty skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/alacritty" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v bspwm >/dev/null 2>&1;then
	show_im "copy bspwm skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/bspwm" "${__distro_path_root}/system_files/skel/.config" 
	cp -r "${__distro_path_root}/skel_extra/.config/sxhkd" "${__distro_path_root}/system_files/skel/.config" 
fi

if command -v dwm >/dev/null 2>&1;then
	show_im "copy dwm skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/dwm" "${__distro_path_root}/system_files/skel/.config"
fi

if command -v polybar >/dev/null 2>&1;then
	show_im "copy polybar skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/polybar" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/polybar-session" "${__distro_path_root}"/system_files/binX11
	
	if [ -d "${__distro_path_root}/bin/X11/polybar" ];then
		ln -sf "${__distro_path_root}"/bin/X11/polybar/* "${__distro_path_root}"/system_files/binX11
	fi
fi

if command -v yad >/dev/null 2>&1;then
	show_im "copy yad bin to system_files/bin ."
	if [ -d "${__distro_path_root}/bin/X11/yad" ];then
		ln -sf "${__distro_path_root}"/bin/X11/yad/* "${__distro_path_root}"/system_files/binX11
	fi
	copy_all__application_link_in_dir "yad"
	if [ -f "${__distro_path_root}/system_files/this_is_laptop" ];then
		show_im "yad laptop stuff."
		if [ -d "${__distro_path_root}/bin/X11/yad/laptop" ];then
			show_im "laptop bin files to system_files/binX11 ."
			ln -sf "${__distro_path_root}/bin/X11/yad/laptop"/* "${__distro_path_root}"/system_files/binX11
		fi
		create_applicationsdotdesktop_link "yadtlp"
	fi
fi

if [ -d "${__distro_path_root}/bin/X11/rofi" ];then
	show_im "rofi bin files to system_files/bin ."
	ln -sf "${__distro_path_root}"/bin/X11/rofi/* "${__distro_path_root}"/system_files/binX11
fi

if command -v picom >/dev/null 2>&1;then
	show_im "copy picom skell file to system_files/skel ."
	cp -r "${__distro_path_root}/skel_extra/.config/picom.conf" "${__distro_path_root}/system_files/skel/.config"
	cp -r "${__distro_path_root}/bin/X11/session_managers/picom-session" "${__distro_path_root}"/system_files/binX11
	[ -f /etc/xdg/autostart/picom.desktop ] && rm -f /etc/xdg/autostart/picom.desktop
fi

if [ "$machine_type_are" = "vm" ];then
	show_im "disable vsync from picom (vsync in virtual machine make issues) and mpv."
	sed -i "s/^vsync = .*/vsync = false;/g" "${__distro_path_root}"/system_files/skel/.config/picom.conf
	sed -i 's/vo=gpu/#vo=gpu/g' "${__distro_path_root}"/system_files/skel/.config/mpv/mpv.conf
fi
	
show_im "LN bin files to system_files/bin ."

if [ -d "${__distro_path_root}/bin/bin" ];then
	show_im "bin bin files to system_files/bin ."
	ln -sf "${__distro_path_root}"/bin/bin/* "${__distro_path_root}"/system_files/bin
fi

if [ -d "${__distro_path_root}/Distro_Specific/bin" ];then
	show_im "bin Distro_Specific files to system_files/bin ."
	ln -sf "${__distro_path_root}"/Distro_Specific/bin/* "${__distro_path_root}"/system_files/bin
fi

if [ -d "${__distro_path_root}/bin/WM" ];then
	show_im "bin WM files to system_files/bin ."
	ln -sf "${__distro_path_root}"/bin/WM/* "${__distro_path_root}"/system_files/bin
	rm -f "${__distro_path_root}"/system_files/bin/create_DB.sh "${__distro_path_root}"/system_files/bin/pre_launch_wm "${__distro_path_root}"/system_files/bin/post_launch_wm 
	
fi

if [ -d "${__distro_path_root}/bin/extra" ];then
	show_im "exra bin files to system_files/bin ."
	ln -sf "${__distro_path_root}"/bin/extra/* "${__distro_path_root}"/system_files/bin
fi

if [ -d "${__distro_path_root}/bin/status" ];then
	show_im "status bin files to system_files/bin ."
	ln -sf "${__distro_path_root}"/bin/status/* "${__distro_path_root}"/system_files/bin
fi

if [ -d "${__distro_path_root}/bin/apps" ];then
	show_im "apps bin files to system_files/bin ."
	ln -sf "${__distro_path_root}"/bin/apps/* "${__distro_path_root}"/system_files/bin
	if ! command -v systemctl >/dev/null 2>&1;then
		rm -f "${__distro_path_root}"/system_files/bin/yautostart
		rm -f "${__distro_path_root}"/system_files/bin/errcheck
		rm -f "${__distro_path_root}"/system_files/bin/bootman
	fi
fi

if [ -d "${__distro_path_root}/bin/session_managers" ];then
	show_im "session_managers bin files to system_files/bin ."
	ln -sf "${__distro_path_root}"/bin/session_managers/* "${__distro_path_root}"/system_files/bin
fi

show_im "nbrowser bin files to system_files/bin ."
ln -sf "${__distro_path_root}"/bin/X11/not_add_2_path/nbrowser/nbrowser "${__distro_path_root}"/system_files/bin
create_applicationsdotdesktop_link "nbrowser"

if [ -f "${__distro_path_root}/system_files/this_is_laptop" ];then
	show_im "laptop stuff."
	if [ -d "${__distro_path_root}/bin/X11/laptop" ];then
		show_im "laptop bin files to system_files/binX11 ."
		ln -sf "${__distro_path_root}/bin/X11/laptop"/* "${__distro_path_root}"/system_files/binX11
	fi
fi

if command -v arandr >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "arandr"
fi

if command -v kvantummanager >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "kvantummanager"
fi

if command -v lightdm-gtk-greeter-settings-pkexec >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "lightdm-gtk-greeter-settings-pkexec"
fi

if command -v lxappearance >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "lxappearance"
fi

if command -v obconf >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "obconf"
fi

if command -v qt5ct >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "qt5ct"
fi

if command -v nvim >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "Neovim"
fi

if command -v docker >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "Docker"
fi

if command -v google-chrome >/dev/null 2>&1;then
	create_applicationsdotdesktop_link "WhatsApp"
fi

if command -v flatpak >/dev/null 2>&1;then
	if flatpak list | grep -q pinta;then
		create_applicationsdotdesktop_link "pinta"
	fi
	
	if flatpak list | grep -q obsidian;then
		create_applicationsdotdesktop_link "obsidian"
	fi
	
	if flatpak list | grep -q audacity;then
		create_applicationsdotdesktop_link "audacity"
	fi
fi

create_auto_completion_files

show_im "prepares gui scripts dir"
"${pipemenu_creater}"/gui-apps-pipemenu-dir || show_em "failed to run ${pipemenu_creater}/gui-apps-pipemenu-dir"

##################################################################################

show_im "Running script for create_DB.sh --all"
${__distro_path_root}/bin/WM/create_DB.sh --all || show_em "failed to run create_DB.sh"

show_im "Running must_create_script."
for script_dir in "${__distro_path_root}"/bin/must_create_script/*;do
	show_im "running $(basename "$script_dir"). from must_create_script ."
	cd "${script_dir}"
	./make || show_em "failed to run make"
done
for script_dir in "${__distro_path_root}"/bin/X11/must_create_script/*;do
	show_im "running $(basename "$script_dir"). from must_create_script ."
	cd "${script_dir}"
	./make || show_em "failed to run make"
done

show_im "Create keybinds."
"${__distro_path_root}"/system_files/binX11/keybinds --initial-step || show_em "failed to run keybinds --initial-step"

ln -sf ${__distro_path_root}/distro_manager/full-upgrade ${__distro_path_root}/system_files/bin

if command -v conky >/dev/null 2>&1;then
	show_im "Create conky weather icons."
	"${__distro_path_root}"/bin/X11/not_add_2_path/conky_weather_icon || show_em "failed to run not_add_2_path/conky_weather_icon"
fi

create_blob_system_files

show_im "prepares hub script dir"
"${__distro_path_root}"/bin/X11/rofi/hub create || show_em "failed to run hub create"

show_im "sed (((distro_path_root)) to ${__distro_path_root} ."
sed_distro_path_root_var_2_correct_value "${__distro_path_root}/system_files/skel"
sed_distro_path_root_var_2_correct_value "${__distro_path_root}/system_files/blob"

show_im "system_files_creater Done."

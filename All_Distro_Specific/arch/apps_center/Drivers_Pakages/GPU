#!/bin/sh
# need superuser : called by my-installer -e
tweek_as_dependency "Enable_multilib" || continue
LIBVA_DIR="$HOME/.local/share/linutil/libva"
MPV_CONF="$HOME/.config/mpv/mpv.conf"
app_name="GPU Drivers"
if [ -z "$machine_type_are" ];then
	machine_type_are="$(cat "${__distro_path_neverremove}/machine_type")"
fi

if [ "$(id -u)" -eq 0 ];then
	_SUPERUSER=""
else
	_SUPERUSER="my-superuser"
fi

add_nvidia=false
add_amd=false
add_intel=false

if [ "$(lspci | grep -i nvidia | grep VGA -c)" != "0" ];then
	add_nvidia=true
fi

if [ "$(lspci | grep -i amd | grep VGA -c)" != "0" ];then
	add_amd=true
fi

if [ "$(lspci | grep -i intel | grep VGA -c)" != "0" ];then
	add_intel=true
fi

create_X11_intel_conf(){
	${_SUPERUSER} mkdir -p /etc/X11/xorg.conf.d/
	${_SUPERUSER} tee /etc/X11/xorg.conf.d/20-intel.conf <<- EOF > /dev/null
	Section "Device"
	Identifier  "Intel Graphics"
	Driver      "Intel"
	Option      "AccelMethod"  "sna"
	Option      "TearFree""True"
	Option      "Tiling""True"
	Option      "SwapbuffersWait" "True"
	#Option      "AccelMethod"  "uxa"
	EndSection
	EOF
}

install_intel_drivers(){
	Packages_2_install="$Packages_2_install xf86-video-intel intel-gpu-tools intel-media-driver" || continue
	#create_X11_intel_conf
}

install_amd_drivers(){
	Packages_2_install="$Packages_2_install mesa xf86-video-ati xf86-video-amdgpu vulkan-radeon vkbasalt" || continue
}

checkNvidiaHardware() {
    # Refer https://nouveau.freedesktop.org/CodeNames.html for model code names
    model=$(lspci -k | grep -A 2 -E "(VGA|3D)" | grep NVIDIA | sed 's/.*Corporation //;s/ .*//' | cut -c 1-2)
    case "$model" in
        GM | GP | GV) return 1 ;;
        TU | GA | AD) return 0 ;;
        *) say "Unsupported hardware." && exit 1 ;;
    esac
}
checkIntelHardware() {
    model=$(grep "model name" /proc/cpuinfo | head -n 1 | cut -d ':' -f 2 | cut -c 2-3)
    [ "$model" -ge 11 ]
}

setKernelParam() {
    PARAMETER="$1"
    if grep -q "$PARAMETER" /etc/default/grub; then
        say "NVIDIA modesetting is already enabled in GRUB."
    else
        ${_SUPERUSER} sed -i "/^GRUB_CMDLINE_LINUX_DEFAULT=/ s/\"$/ $PARAMETER\"/" /etc/default/grub
        say "Added $PARAMETER to /etc/default/grub."
        grub_updater_function
    fi
}

install_nvidia_drivers(){
	installation_list=""
	if [ "$Distro_installer_mode" = false ];then
		install_cuda_=false
		install_kernel_open_dkms_=false
		prompt 'do you want to add Cuda Support?' && install_cuda_=true
		(checkNvidiaHardware && prompt 'do you want to install opensource nvidia-kernel?' && install_kernel_open_dkms_=true) || :
	fi
	[ "$install_cuda_" = true ] && _cuda_="cuda" || _cuda_=""
	[ "$install_kernel_open_dkms_" = true ] && _kernel_open_dkms_="nvidia-dkms" || _kernel_open_dkms_=""
	
	installation_list="$installation_list base-devel dkms ninja meson git"
    installed_kernels=$("$PACKAGER" -Q | grep -E '^linux(| |-rt|-rt-lts|-hardened|-zen|-lts)[^-headers]' | cut -d ' ' -f 1)
    for kernel in $installed_kernels; do
        header="${kernel}-headers"
        say "adding headers for $kernel to installation list..."
        installation_list="$installation_list $header"
    done
    
	# Refer https://wiki.archlinux.org/title/NVIDIA for open-dkms or dkms driver selection
    if [ "$install_kernel_open_dkms_" = true ]; then
        say "adding nvidia open source driver to installation list..."
        installation_list="$installation_list nvidia-open-dkms"
    else
        say "adding nvidia proprietary driver to installation list..."
        installation_list="$installation_list nvidia-dkms"
    fi
    installation_list="$installation_list nvidia-utils $_cuda_"
    
    say "Installing nvidia driver..."
    Packages_2_install="$Packages_2_install $installation_list"
    
    if checkIntelHardware; then
        setKernelParam "ibt=off"
    fi
    # Refer https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend
    setKernelParam "nvidia.NVreg_PreserveVideoMemoryAllocations=1"
    ${_SUPERUSER} systemctl enable nvidia-suspend.service nvidia-hibernate.service nvidia-resume.service
    say "Driver installed successfully."
    tweek_as_dependency "HardwareAcceleration" || continue
}

update_initramfs_now(){
	say "enable drm."
	printf "options nvidia-drm modeset=1" | ${_SUPERUSER} tee /etc/modprobe.d/nvidia-drm.conf >/dev/null 2>&1
	${_SUPERUSER} mkinitcpio -p linux
	say "if system notification regarding Nvidia driver conflicts appeard reboot will fix it."
	say "NVIDIA Drivers installed you need to reboot your pc."
}

if [ "$machine_type_are" = "vm" ];then
	say "This is VM"
fi

if [ "$add_nvidia" = true ];then
	install_nvidia_drivers
fi
	
if [ "$add_amd" = true ];then
	install_amd_drivers
fi
	
if [ "$add_intel" = true ];then
	install_intel_drivers
fi

if [ -n "$Packages_2_install" ];then
	Package_installer_ "$Packages_2_install"
fi

if [ "$add_nvidia" = true ];then
	update_initramfs_now
	if ! ls /dev/nvidia* >/dev/null 2>&1;then
		${_SUPERUSER} nvidia-smi >/dev/null 2>&1
	fi
fi

if [ "$add_intel" = true ];then
	#create_X11_intel_conf
	:
fi

say "Creating Check File (GPU_Drivers_ready)"
create_system_ready_file GPU_Drivers_ready
update_pipemenu gaming-pipemenu.sh || failed_to_run "failed to run create_pipemenu/gaming-pipemenu.sh"
